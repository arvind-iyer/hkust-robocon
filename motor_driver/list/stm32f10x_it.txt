; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_it.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_it.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I"C:\Users\Kenneth Au\Desktop\toKenneth\Complicated Big Motor Control\(encoder)24V Big Blue Black Motor Control June 7\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=513 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\obj\stm32f10x_it.crf user\stm32f10x_it.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;54     u32 i;
;;;55     void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57     	read_encoder();
000002  f7fffffe          BL       read_encoder
;;;58     	get_current();	
000006  f7fffffe          BL       get_current
;;;59     	vel_n_pos(); 
00000a  f7fffffe          BL       vel_n_pos
;;;60     	increase_encoder();
00000e  f7fffffe          BL       increase_encoder
;;;61     /*
;;;62     	if(ticks<5000)
;;;63     		ticks++;
;;;64     	else 
;;;65     	{
;;;66     		ticks = 0;
;;;67     		clock++;
;;;68     	
;;;69     	}
;;;70     
;;;71     	if(start == 1)
;;;72     	{  
;;;73     		if (enable_bar_memory!=enable_bar)
;;;74     			clear_record();
;;;75     						
;;;76     	    vel_n_pos();
;;;77     
;;;78     	   
;;;79     		enable_bar_memory=enable_bar;
;;;80     
;;;81     	 	if(mode == VEL_MOVE)
;;;82     		{
;;;83     			enable_bar=1;	 
;;;84     			check = 1;
;;;85     		}
;;;86     		else if(mode == VEL_STOP)
;;;87     		{
;;;88     			enable_bar=2;
;;;89     			check = 2;
;;;90     		}
;;;91     		else if(mode == VEL_ZERO)
;;;92     		{
;;;93     		 	enable_bar=0;
;;;94     			check = 3;
;;;95     		}
;;;96     
;;;97     		else if(mode == POS_MOVE)
;;;98     		{
;;;99     			enable_bar=3;
;;;100    			check = 4;		
;;;101    		}
;;;102    		
;;;103    		else if (mode == CALIBRATION)
;;;104    		{
;;;105    			enable_bar=6;
;;;106    			check=5;
;;;107    		}
;;;108    		
;;;109    	}
;;;110    	
;;;111    	else 
;;;112    	{ 
;;;113    		read_encoder();	
;;;114    		get_current(); 
;;;115    		clear_record();
;;;116    		
;;;117    		if (pwm_init>=0)   
;;;118    			motion_set_motor(pwm_init,1);
;;;119    		else
;;;120    			motion_set_motor(-pwm_init,0);
;;;121    
;;;122    	}
;;;123    	
;;;124    */		 
;;;125    } 
000012  bd10              POP      {r4,pc}
;;;126    							   
                          ENDP


                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;126    							   
;;;127    void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;128    {
;;;129    	if(USART_GetFlagStatus(USART3,USART_IT_RXNE)==SET)
000002  f2405125          MOV      r1,#0x525
000006  4847              LDR      r0,|L2.292|
000008  f7fffffe          BL       USART_GetFlagStatus
00000c  2801              CMP      r0,#1
00000e  d13d              BNE      |L2.140|
;;;130    	{	           	           
;;;131    		rx_data = USART_ReceiveData(USART3) & 0xff;
000010  4844              LDR      r0,|L2.292|
000012  f7fffffe          BL       USART_ReceiveData
000016  4944              LDR      r1,|L2.296|
000018  7008              STRB     r0,[r1,#0]
;;;132    			
;;;133    		if (state == 0)		//cmd_state
00001a  4844              LDR      r0,|L2.300|
00001c  7800              LDRB     r0,[r0,#0]  ; state
00001e  b960              CBNZ     r0,|L2.58|
;;;134    		{
;;;135    			cmd = rx_data;
000020  4608              MOV      r0,r1
000022  7800              LDRB     r0,[r0,#0]  ; rx_data
000024  4942              LDR      r1,|L2.304|
000026  8008              STRH     r0,[r1,#0]
;;;136    			state = 1;
000028  2001              MOVS     r0,#1
00002a  4940              LDR      r1,|L2.300|
00002c  7008              STRB     r0,[r1,#0]
;;;137    			last_data = 0;
00002e  2000              MOVS     r0,#0
000030  4940              LDR      r1,|L2.308|
000032  7008              STRB     r0,[r1,#0]
;;;138    			data_cnt = 0;
000034  4940              LDR      r1,|L2.312|
000036  7008              STRB     r0,[r1,#0]
000038  e028              B        |L2.140|
                  |L2.58|
;;;139    		}
;;;140    /*		else if (state == 1)
;;;141    		{
;;;142    		    port_index=rx_data;
;;;143    			state = 2;
;;;144    			last_data = 0;
;;;145    			data_cnt = 0;
;;;146    		}	  */
;;;147    		else if (state == 1)	//data_state
00003a  483c              LDR      r0,|L2.300|
00003c  7800              LDRB     r0,[r0,#0]  ; state
00003e  2801              CMP      r0,#1
000040  d124              BNE      |L2.140|
;;;148    		{
;;;149    			if (data_cnt < rx_buf_size) rx_buffer[data_cnt ++] = rx_data;
000042  483d              LDR      r0,|L2.312|
000044  7800              LDRB     r0,[r0,#0]  ; data_cnt
000046  2832              CMP      r0,#0x32
000048  da09              BGE      |L2.94|
00004a  4837              LDR      r0,|L2.296|
00004c  7801              LDRB     r1,[r0,#0]  ; rx_data
00004e  483a              LDR      r0,|L2.312|
000050  7802              LDRB     r2,[r0,#0]  ; data_cnt
000052  7800              LDRB     r0,[r0,#0]  ; data_cnt
000054  1c40              ADDS     r0,r0,#1
000056  4b38              LDR      r3,|L2.312|
000058  7018              STRB     r0,[r3,#0]
00005a  4838              LDR      r0,|L2.316|
00005c  5481              STRB     r1,[r0,r2]
                  |L2.94|
;;;150    			if (last_data == stop_byte1 && rx_data == stop_byte2)
00005e  4835              LDR      r0,|L2.308|
000060  7800              LDRB     r0,[r0,#0]  ; last_data
000062  28fe              CMP      r0,#0xfe
000064  d10e              BNE      |L2.132|
000066  4830              LDR      r0,|L2.296|
000068  7800              LDRB     r0,[r0,#0]  ; rx_data
00006a  28ff              CMP      r0,#0xff
00006c  d10a              BNE      |L2.132|
;;;151    			{
;;;152    				cmd_flag = 1;
00006e  2001              MOVS     r0,#1
000070  4933              LDR      r1,|L2.320|
000072  7008              STRB     r0,[r1,#0]
;;;153    				data_cnt -= 2;
000074  4830              LDR      r0,|L2.312|
000076  7800              LDRB     r0,[r0,#0]  ; data_cnt
000078  1e80              SUBS     r0,r0,#2
00007a  492f              LDR      r1,|L2.312|
00007c  7008              STRB     r0,[r1,#0]
;;;154    				state = 0;
00007e  2000              MOVS     r0,#0
000080  492a              LDR      r1,|L2.300|
000082  7008              STRB     r0,[r1,#0]
                  |L2.132|
;;;155    			}
;;;156    			last_data = rx_data;
000084  4828              LDR      r0,|L2.296|
000086  7800              LDRB     r0,[r0,#0]  ; rx_data
000088  492a              LDR      r1,|L2.308|
00008a  7008              STRB     r0,[r1,#0]
                  |L2.140|
;;;157    		}
;;;158    	}
;;;159    
;;;160    	
;;;161    	if(USART_GetFlagStatus(USART3,USART_FLAG_TC)==SET)
00008c  2140              MOVS     r1,#0x40
00008e  4825              LDR      r0,|L2.292|
000090  f7fffffe          BL       USART_GetFlagStatus
000094  2801              CMP      r0,#1
000096  d144              BNE      |L2.290|
;;;162    	{	
;;;163    	    if (tx_data_size != 0)
000098  482a              LDR      r0,|L2.324|
00009a  7800              LDRB     r0,[r0,#0]  ; tx_data_size
00009c  2800              CMP      r0,#0
00009e  d040              BEQ      |L2.290|
;;;164    		{						  
;;;165    	        if(tx_data_index<tx_buffer_token-1)
0000a0  4829              LDR      r0,|L2.328|
0000a2  7800              LDRB     r0,[r0,#0]  ; tx_buffer_token
0000a4  1e40              SUBS     r0,r0,#1
0000a6  4929              LDR      r1,|L2.332|
0000a8  7809              LDRB     r1,[r1,#0]  ; tx_data_index
0000aa  4288              CMP      r0,r1
0000ac  dd18              BLE      |L2.224|
;;;166    			{						 
;;;167    		    	tx_data=tx_buffer[tx_data_index];
0000ae  4828              LDR      r0,|L2.336|
0000b0  4926              LDR      r1,|L2.332|
0000b2  7809              LDRB     r1,[r1,#0]  ; tx_data_index
0000b4  5c40              LDRB     r0,[r0,r1]
0000b6  4927              LDR      r1,|L2.340|
0000b8  7008              STRB     r0,[r1,#0]
;;;168    				tx_data_index++;
0000ba  4824              LDR      r0,|L2.332|
0000bc  7800              LDRB     r0,[r0,#0]  ; tx_data_index
0000be  1c40              ADDS     r0,r0,#1
0000c0  4922              LDR      r1,|L2.332|
0000c2  7008              STRB     r0,[r1,#0]
;;;169    				if (tx_data_index>buf_size-1) tx_data_index-=buf_size;
0000c4  4608              MOV      r0,r1
0000c6  7800              LDRB     r0,[r0,#0]  ; tx_data_index
0000c8  28c7              CMP      r0,#0xc7
0000ca  dd03              BLE      |L2.212|
0000cc  4608              MOV      r0,r1
0000ce  7800              LDRB     r0,[r0,#0]  ; tx_data_index
0000d0  38c8              SUBS     r0,r0,#0xc8
0000d2  7008              STRB     r0,[r1,#0]
                  |L2.212|
;;;170    	        	USART_SendData(USART3, tx_data);
0000d4  481f              LDR      r0,|L2.340|
0000d6  7801              LDRB     r1,[r0,#0]  ; tx_data
0000d8  4812              LDR      r0,|L2.292|
0000da  f7fffffe          BL       USART_SendData
0000de  e020              B        |L2.290|
                  |L2.224|
;;;171        	  
;;;172    			}
;;;173    			else
;;;174    			{
;;;175    				USART_ITConfig(USART3, USART_IT_TC, DISABLE);
0000e0  2200              MOVS     r2,#0
0000e2  f2406126          MOV      r1,#0x626
0000e6  480f              LDR      r0,|L2.292|
0000e8  f7fffffe          BL       USART_ITConfig
;;;176    				tx_data=tx_buffer[tx_data_index];
0000ec  4818              LDR      r0,|L2.336|
0000ee  4917              LDR      r1,|L2.332|
0000f0  7809              LDRB     r1,[r1,#0]  ; tx_data_index
0000f2  5c40              LDRB     r0,[r0,r1]
0000f4  4917              LDR      r1,|L2.340|
0000f6  7008              STRB     r0,[r1,#0]
;;;177    				tx_data_index++;
0000f8  4814              LDR      r0,|L2.332|
0000fa  7800              LDRB     r0,[r0,#0]  ; tx_data_index
0000fc  1c40              ADDS     r0,r0,#1
0000fe  4913              LDR      r1,|L2.332|
000100  7008              STRB     r0,[r1,#0]
;;;178    				if (tx_data_index>buf_size-1) tx_data_index-=buf_size;
000102  4608              MOV      r0,r1
000104  7800              LDRB     r0,[r0,#0]  ; tx_data_index
000106  28c7              CMP      r0,#0xc7
000108  dd03              BLE      |L2.274|
00010a  4608              MOV      r0,r1
00010c  7800              LDRB     r0,[r0,#0]  ; tx_data_index
00010e  38c8              SUBS     r0,r0,#0xc8
000110  7008              STRB     r0,[r1,#0]
                  |L2.274|
;;;179    	        	USART_SendData(USART3, tx_data);
000112  4810              LDR      r0,|L2.340|
000114  7801              LDRB     r1,[r0,#0]  ; tx_data
000116  4803              LDR      r0,|L2.292|
000118  f7fffffe          BL       USART_SendData
;;;180    				tx_data_size=0;
00011c  2000              MOVS     r0,#0
00011e  4909              LDR      r1,|L2.324|
000120  7008              STRB     r0,[r1,#0]
                  |L2.290|
;;;181    
;;;182    			}	
;;;183    		}
;;;184    	} 
;;;185    }
000122  bd10              POP      {r4,pc}
                          ENDP

                  |L2.292|
                          DCD      0x40004800
                  |L2.296|
                          DCD      rx_data
                  |L2.300|
                          DCD      state
                  |L2.304|
                          DCD      ||cmd||
                  |L2.308|
                          DCD      last_data
                  |L2.312|
                          DCD      data_cnt
                  |L2.316|
                          DCD      rx_buffer
                  |L2.320|
                          DCD      cmd_flag
                  |L2.324|
                          DCD      tx_data_size
                  |L2.328|
                          DCD      tx_buffer_token
                  |L2.332|
                          DCD      tx_data_index
                  |L2.336|
                          DCD      tx_buffer
                  |L2.340|
                          DCD      tx_data

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  rx_buffer
                          %        200
                  tx_buffer
                          %        200

                          AREA ||.data||, DATA, ALIGN=2

                  ||cmd||
000000  0000              DCW      0x0000
                  cmd_flag
000002  00                DCB      0x00
                  state
000003  00                DCB      0x00
                  last_data
000004  00                DCB      0x00
                  data_cnt
000005  00                DCB      0x00
                  tx_buffer_token
000006  00                DCB      0x00
                  rx_data
000007  00                DCB      0x00
                  tx_data
000008  00                DCB      0x00
                  tx_data_index
000009  00                DCB      0x00
                  tx_data_size
00000a  0000              DCB      0x00,0x00
                  ticks
                          DCD      0x00000000
                  start
000010  00                DCB      0x00
                  mode
000011  000000            DCB      0x00,0x00,0x00
                  check
000014  00000000          DCFS     0x00000000 ; 0
                  clock
                          DCD      0x00000000
                  speed
                          DCD      0x00000000
                  i
                          DCD      0x00000000
