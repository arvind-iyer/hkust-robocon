; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\pid_pos.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\pid_pos.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I"C:\Users\Kenneth Au\Desktop\toKenneth\Complicated Big Motor Control\(encoder)24V Big Blue Black Motor Control June 7\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=513 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\obj\pid_pos.crf user\pid_pos.c]
                          THUMB

                          AREA ||i.abs||, CODE, READONLY, ALIGN=1

                  abs PROC
;;;42     
;;;43     float abs(float input)
000000  b510              PUSH     {r4,lr}
;;;44     {
000002  4604              MOV      r4,r0
;;;45         if (input>=0)
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       __aeabi_cfrcmple
00000c  d801              BHI      |L1.18|
;;;46     	    return input;
00000e  4620              MOV      r0,r4
                  |L1.16|
;;;47     	else 
;;;48     	    return -input;
;;;49     }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  f0844000          EOR      r0,r4,#0x80000000     ;48
000016  e7fb              B        |L1.16|
;;;50     
                          ENDP


                          AREA ||i.motor_set_position||, CODE, READONLY, ALIGN=2

                  motor_set_position PROC
;;;173    //called by user
;;;174    void motor_set_position(s32 position, u16 vel)
000000  b570              PUSH     {r4-r6,lr}
;;;175    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;176    	pos_set_home();
000006  f7fffffe          BL       pos_set_home
;;;177    	max_pwm=vel;
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_ui2f
000010  4905              LDR      r1,|L2.40|
000012  6008              STR      r0,[r1,#0]  ; max_pwm
;;;178    	count_dest=position;
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       __aeabi_i2f
00001a  4904              LDR      r1,|L2.44|
00001c  6008              STR      r0,[r1,#0]  ; count_dest
;;;179    
;;;180    //	mode=4;
;;;181    	enable_bar=3;
00001e  2003              MOVS     r0,#3
000020  4903              LDR      r1,|L2.48|
000022  7008              STRB     r0,[r1,#0]
;;;182    }
000024  bd70              POP      {r4-r6,pc}
;;;183    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      max_pwm
                  |L2.44|
                          DCD      count_dest
                  |L2.48|
                          DCD      enable_bar

                          AREA ||i.pos_cal_function_mode||, CODE, READONLY, ALIGN=2

                  pos_cal_function_mode PROC
;;;87     
;;;88     void pos_cal_function_mode(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;89     {
;;;90     	count_total= -d_cal+count_init;
000004  48f0              LDR      r0,|L3.968|
000006  6800              LDR      r0,[r0,#0]  ; d_cal
000008  f0804400          EOR      r4,r0,#0x80000000
00000c  48ef              LDR      r0,|L3.972|
00000e  6801              LDR      r1,[r0,#0]  ; count_init
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       __aeabi_fadd
000016  49ee              LDR      r1,|L3.976|
000018  6008              STR      r0,[r1,#0]  ; count_total
;;;91     
;;;92     	predictor = count_total + d_count*predict_parameter;		
00001a  48ee              LDR      r0,|L3.980|
00001c  6801              LDR      r1,[r0,#0]  ; predict_parameter
00001e  48ee              LDR      r0,|L3.984|
000020  6800              LDR      r0,[r0,#0]  ; d_count
000022  f7fffffe          BL       __aeabi_fmul
000026  4604              MOV      r4,r0
000028  48e9              LDR      r0,|L3.976|
00002a  6801              LDR      r1,[r0,#0]  ; count_total
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       __aeabi_fadd
000032  49ea              LDR      r1,|L3.988|
000034  6008              STR      r0,[r1,#0]  ; predictor
;;;93     
;;;94     	if (count_dest>=0)
000036  2100              MOVS     r1,#0
000038  48e9              LDR      r0,|L3.992|
00003a  6800              LDR      r0,[r0,#0]  ; count_dest
00003c  f7fffffe          BL       __aeabi_cfrcmple
000040  d840              BHI      |L3.196|
;;;95     	{
;;;96     	    offset=5;
000042  48e8              LDR      r0,|L3.996|
000044  49e8              LDR      r1,|L3.1000|
000046  6008              STR      r0,[r1,#0]  ; offset
;;;97     		sqrt_rt1=sqrt(abs(2*predictor*max_acc));
000048  48e4              LDR      r0,|L3.988|
00004a  6801              LDR      r1,[r0,#0]  ; predictor
00004c  f04f4080          MOV      r0,#0x40000000
000050  f7fffffe          BL       __aeabi_fmul
000054  4682              MOV      r10,r0
000056  48e5              LDR      r0,|L3.1004|
000058  6801              LDR      r1,[r0,#0]  ; max_acc
00005a  4650              MOV      r0,r10
00005c  f7fffffe          BL       __aeabi_fmul
000060  4681              MOV      r9,r0
000062  f7fffffe          BL       abs
000066  4604              MOV      r4,r0
000068  f7fffffe          BL       __aeabi_f2d
00006c  4607              MOV      r7,r0
00006e  f7fffffe          BL       sqrt
000072  4605              MOV      r5,r0
000074  f7fffffe          BL       __aeabi_d2f
000078  49dd              LDR      r1,|L3.1008|
00007a  6008              STR      r0,[r1,#0]  ; sqrt_rt1
;;;98     		sqrt_rt2=sqrt(abs(2*(count_dest-predictor)*max_acc));	
00007c  48d7              LDR      r0,|L3.988|
00007e  6801              LDR      r1,[r0,#0]  ; predictor
000080  48d7              LDR      r0,|L3.992|
000082  6800              LDR      r0,[r0,#0]  ; count_dest
000084  f7fffffe          BL       __aeabi_fsub
000088  4683              MOV      r11,r0
00008a  f04f4180          MOV      r1,#0x40000000
00008e  f7fffffe          BL       __aeabi_fmul
000092  4682              MOV      r10,r0
000094  48d5              LDR      r0,|L3.1004|
000096  6801              LDR      r1,[r0,#0]  ; max_acc
000098  4650              MOV      r0,r10
00009a  f7fffffe          BL       __aeabi_fmul
00009e  4681              MOV      r9,r0
0000a0  f7fffffe          BL       abs
0000a4  4604              MOV      r4,r0
0000a6  f7fffffe          BL       __aeabi_f2d
0000aa  4607              MOV      r7,r0
0000ac  f7fffffe          BL       sqrt
0000b0  4605              MOV      r5,r0
0000b2  f7fffffe          BL       __aeabi_d2f
0000b6  49cf              LDR      r1,|L3.1012|
0000b8  6008              STR      r0,[r1,#0]  ; sqrt_rt2
;;;99     		max_speed=max_pwm;
0000ba  48cf              LDR      r0,|L3.1016|
0000bc  6800              LDR      r0,[r0,#0]  ; max_pwm
0000be  49cf              LDR      r1,|L3.1020|
0000c0  6008              STR      r0,[r1,#0]  ; max_speed
0000c2  e045              B        |L3.336|
                  |L3.196|
;;;100    	}
;;;101    	else 
;;;102    	{
;;;103    	    offset=-5;
0000c4  48ce              LDR      r0,|L3.1024|
0000c6  49c8              LDR      r1,|L3.1000|
0000c8  6008              STR      r0,[r1,#0]  ; offset
;;;104    		sqrt_rt1=-sqrt(abs(2*predictor*max_acc));
0000ca  48c4              LDR      r0,|L3.988|
0000cc  6801              LDR      r1,[r0,#0]  ; predictor
0000ce  f04f4080          MOV      r0,#0x40000000
0000d2  f7fffffe          BL       __aeabi_fmul
0000d6  4682              MOV      r10,r0
0000d8  48c4              LDR      r0,|L3.1004|
0000da  6801              LDR      r1,[r0,#0]  ; max_acc
0000dc  4650              MOV      r0,r10
0000de  f7fffffe          BL       __aeabi_fmul
0000e2  4681              MOV      r9,r0
0000e4  f7fffffe          BL       abs
0000e8  4604              MOV      r4,r0
0000ea  f7fffffe          BL       __aeabi_f2d
0000ee  4607              MOV      r7,r0
0000f0  f7fffffe          BL       sqrt
0000f4  f0814100          EOR      r1,r1,#0x80000000
0000f8  4605              MOV      r5,r0
0000fa  f7fffffe          BL       __aeabi_d2f
0000fe  49bc              LDR      r1,|L3.1008|
000100  6008              STR      r0,[r1,#0]  ; sqrt_rt1
;;;105    		sqrt_rt2=-sqrt(abs(2*(count_dest-predictor)*max_acc));
000102  48b6              LDR      r0,|L3.988|
000104  6801              LDR      r1,[r0,#0]  ; predictor
000106  48b6              LDR      r0,|L3.992|
000108  6800              LDR      r0,[r0,#0]  ; count_dest
00010a  f7fffffe          BL       __aeabi_fsub
00010e  4683              MOV      r11,r0
000110  f04f4180          MOV      r1,#0x40000000
000114  f7fffffe          BL       __aeabi_fmul
000118  4682              MOV      r10,r0
00011a  48b4              LDR      r0,|L3.1004|
00011c  6801              LDR      r1,[r0,#0]  ; max_acc
00011e  4650              MOV      r0,r10
000120  f7fffffe          BL       __aeabi_fmul
000124  4681              MOV      r9,r0
000126  f7fffffe          BL       abs
00012a  4604              MOV      r4,r0
00012c  f7fffffe          BL       __aeabi_f2d
000130  4607              MOV      r7,r0
000132  f7fffffe          BL       sqrt
000136  f0814100          EOR      r1,r1,#0x80000000
00013a  4605              MOV      r5,r0
00013c  f7fffffe          BL       __aeabi_d2f
000140  49ac              LDR      r1,|L3.1012|
000142  6008              STR      r0,[r1,#0]  ; sqrt_rt2
;;;106    		max_speed=-max_pwm;
000144  48ac              LDR      r0,|L3.1016|
000146  6800              LDR      r0,[r0,#0]  ; max_pwm
000148  f0804000          EOR      r0,r0,#0x80000000
00014c  49ab              LDR      r1,|L3.1020|
00014e  6008              STR      r0,[r1,#0]  ; max_speed
                  |L3.336|
;;;107    	}
;;;108    
;;;109    	if (abs(count_dest) <= abs(max_pwm*max_pwm/max_acc))
000150  48a9              LDR      r0,|L3.1016|
000152  6801              LDR      r1,[r0,#0]  ; max_pwm
000154  6800              LDR      r0,[r0,#0]  ; max_pwm
000156  f7fffffe          BL       __aeabi_fmul
00015a  4607              MOV      r7,r0
00015c  48a3              LDR      r0,|L3.1004|
00015e  6801              LDR      r1,[r0,#0]  ; max_acc
000160  4638              MOV      r0,r7
000162  f7fffffe          BL       __aeabi_fdiv
000166  4605              MOV      r5,r0
000168  f7fffffe          BL       abs
00016c  4604              MOV      r4,r0
00016e  489c              LDR      r0,|L3.992|
000170  6800              LDR      r0,[r0,#0]  ; count_dest
000172  f7fffffe          BL       abs
000176  4606              MOV      r6,r0
000178  4621              MOV      r1,r4
00017a  f7fffffe          BL       __aeabi_cfcmple
00017e  d85a              BHI      |L3.566|
;;;110    	{	
;;;111    	    if (abs(predictor) == 0)
000180  4896              LDR      r0,|L3.988|
000182  6800              LDR      r0,[r0,#0]  ; predictor
000184  f7fffffe          BL       abs
000188  4604              MOV      r4,r0
00018a  2100              MOVS     r1,#0
00018c  f7fffffe          BL       __aeabi_cfcmpeq
000190  d104              BNE      |L3.412|
;;;112    		    count_input=offset;
000192  4895              LDR      r0,|L3.1000|
000194  6800              LDR      r0,[r0,#0]  ; offset
000196  499b              LDR      r1,|L3.1028|
000198  6008              STR      r0,[r1,#0]  ; count_input
00019a  e10f              B        |L3.956|
                  |L3.412|
;;;113    
;;;114    	    else if (abs(predictor) <= abs(count_dest/2))
00019c  f04f4180          MOV      r1,#0x40000000
0001a0  488f              LDR      r0,|L3.992|
0001a2  6800              LDR      r0,[r0,#0]  ; count_dest
0001a4  f7fffffe          BL       __aeabi_fdiv
0001a8  4606              MOV      r6,r0
0001aa  f7fffffe          BL       abs
0001ae  4604              MOV      r4,r0
0001b0  488a              LDR      r0,|L3.988|
0001b2  6800              LDR      r0,[r0,#0]  ; predictor
0001b4  f7fffffe          BL       abs
0001b8  4605              MOV      r5,r0
0001ba  4621              MOV      r1,r4
0001bc  f7fffffe          BL       __aeabi_cfcmple
0001c0  d808              BHI      |L3.468|
;;;115    		    count_input=sqrt_rt1+offset;
0001c2  4889              LDR      r0,|L3.1000|
0001c4  6801              LDR      r1,[r0,#0]  ; offset
0001c6  488a              LDR      r0,|L3.1008|
0001c8  6800              LDR      r0,[r0,#0]  ; sqrt_rt1
0001ca  f7fffffe          BL       __aeabi_fadd
0001ce  498d              LDR      r1,|L3.1028|
0001d0  6008              STR      r0,[r1,#0]  ; count_input
0001d2  e0f3              B        |L3.956|
                  |L3.468|
;;;116    
;;;117    		else if (abs(predictor)>abs(count_dest/2) && abs(predictor)<abs(count_dest))
0001d4  f04f4180          MOV      r1,#0x40000000
0001d8  4881              LDR      r0,|L3.992|
0001da  6800              LDR      r0,[r0,#0]  ; count_dest
0001dc  f7fffffe          BL       __aeabi_fdiv
0001e0  4606              MOV      r6,r0
0001e2  f7fffffe          BL       abs
0001e6  4604              MOV      r4,r0
0001e8  487c              LDR      r0,|L3.988|
0001ea  6800              LDR      r0,[r0,#0]  ; predictor
0001ec  f7fffffe          BL       abs
0001f0  4605              MOV      r5,r0
0001f2  4621              MOV      r1,r4
0001f4  f7fffffe          BL       __aeabi_cfrcmple
0001f8  d216              BCS      |L3.552|
0001fa  4879              LDR      r0,|L3.992|
0001fc  6800              LDR      r0,[r0,#0]  ; count_dest
0001fe  f7fffffe          BL       abs
000202  4604              MOV      r4,r0
000204  4875              LDR      r0,|L3.988|
000206  6800              LDR      r0,[r0,#0]  ; predictor
000208  f7fffffe          BL       abs
00020c  4605              MOV      r5,r0
00020e  4621              MOV      r1,r4
000210  f7fffffe          BL       __aeabi_cfcmple
000214  d208              BCS      |L3.552|
;;;118    		    count_input=sqrt_rt2+offset; 
000216  4874              LDR      r0,|L3.1000|
000218  6801              LDR      r1,[r0,#0]  ; offset
00021a  4876              LDR      r0,|L3.1012|
00021c  6800              LDR      r0,[r0,#0]  ; sqrt_rt2
00021e  f7fffffe          BL       __aeabi_fadd
000222  4978              LDR      r1,|L3.1028|
000224  6008              STR      r0,[r1,#0]  ; count_input
000226  e0c9              B        |L3.956|
                  |L3.552|
;;;119    
;;;120    		else 
;;;121    		{
;;;122    		    reach_token=1;
000228  2001              MOVS     r0,#1
00022a  4977              LDR      r1,|L3.1032|
00022c  7008              STRB     r0,[r1,#0]
;;;123    			count_input=0;
00022e  2000              MOVS     r0,#0
000230  4974              LDR      r1,|L3.1028|
000232  6008              STR      r0,[r1,#0]  ; count_input
000234  e0c2              B        |L3.956|
                  |L3.566|
;;;124    		}
;;;125    	}
;;;126    	else 
;;;127    	{
;;;128    	    if (abs(predictor) == 0)
000236  4869              LDR      r0,|L3.988|
000238  6800              LDR      r0,[r0,#0]  ; predictor
00023a  f7fffffe          BL       abs
00023e  4604              MOV      r4,r0
000240  2100              MOVS     r1,#0
000242  f7fffffe          BL       __aeabi_cfcmpeq
000246  d104              BNE      |L3.594|
;;;129    		    count_input=offset;
000248  4867              LDR      r0,|L3.1000|
00024a  6800              LDR      r0,[r0,#0]  ; offset
00024c  496d              LDR      r1,|L3.1028|
00024e  6008              STR      r0,[r1,#0]  ; count_input
000250  e0b4              B        |L3.956|
                  |L3.594|
;;;130    
;;;131    	    else if (abs(predictor) < abs(max_pwm*max_pwm/(2*max_acc)))
000252  4866              LDR      r0,|L3.1004|
000254  6801              LDR      r1,[r0,#0]  ; max_acc
000256  f04f4080          MOV      r0,#0x40000000
00025a  f7fffffe          BL       __aeabi_fmul
00025e  4607              MOV      r7,r0
000260  4865              LDR      r0,|L3.1016|
000262  6801              LDR      r1,[r0,#0]  ; max_pwm
000264  6800              LDR      r0,[r0,#0]  ; max_pwm
000266  f7fffffe          BL       __aeabi_fmul
00026a  4680              MOV      r8,r0
00026c  4639              MOV      r1,r7
00026e  f7fffffe          BL       __aeabi_fdiv
000272  4605              MOV      r5,r0
000274  f7fffffe          BL       abs
000278  4604              MOV      r4,r0
00027a  4858              LDR      r0,|L3.988|
00027c  6800              LDR      r0,[r0,#0]  ; predictor
00027e  f7fffffe          BL       abs
000282  4606              MOV      r6,r0
000284  4621              MOV      r1,r4
000286  f7fffffe          BL       __aeabi_cfcmple
00028a  d208              BCS      |L3.670|
;;;132    			count_input=sqrt_rt1+offset;
00028c  4856              LDR      r0,|L3.1000|
00028e  6801              LDR      r1,[r0,#0]  ; offset
000290  4857              LDR      r0,|L3.1008|
000292  6800              LDR      r0,[r0,#0]  ; sqrt_rt1
000294  f7fffffe          BL       __aeabi_fadd
000298  495a              LDR      r1,|L3.1028|
00029a  6008              STR      r0,[r1,#0]  ; count_input
00029c  e08e              B        |L3.956|
                  |L3.670|
;;;133    
;;;134    		else if  (abs(predictor) >= abs(max_pwm*max_pwm/(2*max_acc)) 
00029e  4853              LDR      r0,|L3.1004|
0002a0  6801              LDR      r1,[r0,#0]  ; max_acc
0002a2  f04f4080          MOV      r0,#0x40000000
0002a6  f7fffffe          BL       __aeabi_fmul
0002aa  4607              MOV      r7,r0
0002ac  4852              LDR      r0,|L3.1016|
0002ae  6801              LDR      r1,[r0,#0]  ; max_pwm
0002b0  6800              LDR      r0,[r0,#0]  ; max_pwm
0002b2  f7fffffe          BL       __aeabi_fmul
0002b6  4680              MOV      r8,r0
0002b8  4639              MOV      r1,r7
0002ba  f7fffffe          BL       __aeabi_fdiv
0002be  4604              MOV      r4,r0
0002c0  f7fffffe          BL       abs
0002c4  4605              MOV      r5,r0
0002c6  4845              LDR      r0,|L3.988|
0002c8  6800              LDR      r0,[r0,#0]  ; predictor
0002ca  f7fffffe          BL       abs
0002ce  4606              MOV      r6,r0
0002d0  4629              MOV      r1,r5
0002d2  f7fffffe          BL       __aeabi_cfrcmple
0002d6  d82e              BHI      |L3.822|
;;;135    		       && abs(predictor) <= abs(abs(count_dest)-(max_pwm*max_pwm/(2*max_acc))))
0002d8  4844              LDR      r0,|L3.1004|
0002da  6801              LDR      r1,[r0,#0]  ; max_acc
0002dc  f04f4080          MOV      r0,#0x40000000
0002e0  f7fffffe          BL       __aeabi_fmul
0002e4  4681              MOV      r9,r0
0002e6  4844              LDR      r0,|L3.1016|
0002e8  6801              LDR      r1,[r0,#0]  ; max_pwm
0002ea  6800              LDR      r0,[r0,#0]  ; max_pwm
0002ec  f7fffffe          BL       __aeabi_fmul
0002f0  4682              MOV      r10,r0
0002f2  4649              MOV      r1,r9
0002f4  f7fffffe          BL       __aeabi_fdiv
0002f8  4606              MOV      r6,r0
0002fa  4839              LDR      r0,|L3.992|
0002fc  6800              LDR      r0,[r0,#0]  ; count_dest
0002fe  f7fffffe          BL       abs
000302  4680              MOV      r8,r0
000304  4631              MOV      r1,r6
000306  f7fffffe          BL       __aeabi_fsub
00030a  4605              MOV      r5,r0
00030c  f7fffffe          BL       abs
000310  4604              MOV      r4,r0
000312  4832              LDR      r0,|L3.988|
000314  6800              LDR      r0,[r0,#0]  ; predictor
000316  f7fffffe          BL       abs
00031a  4607              MOV      r7,r0
00031c  4621              MOV      r1,r4
00031e  f7fffffe          BL       __aeabi_cfcmple
000322  d808              BHI      |L3.822|
;;;136    			count_input=max_speed+offset;
000324  4830              LDR      r0,|L3.1000|
000326  6801              LDR      r1,[r0,#0]  ; offset
000328  4834              LDR      r0,|L3.1020|
00032a  6800              LDR      r0,[r0,#0]  ; max_speed
00032c  f7fffffe          BL       __aeabi_fadd
000330  4934              LDR      r1,|L3.1028|
000332  6008              STR      r0,[r1,#0]  ; count_input
000334  e042              B        |L3.956|
                  |L3.822|
;;;137    
;;;138    		else if  ( abs(predictor) > abs(abs(count_dest)-(max_pwm*max_pwm/(2*max_acc))) 
000336  482d              LDR      r0,|L3.1004|
000338  6801              LDR      r1,[r0,#0]  ; max_acc
00033a  f04f4080          MOV      r0,#0x40000000
00033e  f7fffffe          BL       __aeabi_fmul
000342  4681              MOV      r9,r0
000344  482c              LDR      r0,|L3.1016|
000346  6801              LDR      r1,[r0,#0]  ; max_pwm
000348  6800              LDR      r0,[r0,#0]  ; max_pwm
00034a  f7fffffe          BL       __aeabi_fmul
00034e  4682              MOV      r10,r0
000350  4649              MOV      r1,r9
000352  f7fffffe          BL       __aeabi_fdiv
000356  4606              MOV      r6,r0
000358  4821              LDR      r0,|L3.992|
00035a  6800              LDR      r0,[r0,#0]  ; count_dest
00035c  f7fffffe          BL       abs
000360  4680              MOV      r8,r0
000362  4631              MOV      r1,r6
000364  f7fffffe          BL       __aeabi_fsub
000368  4605              MOV      r5,r0
00036a  f7fffffe          BL       abs
00036e  4604              MOV      r4,r0
000370  481a              LDR      r0,|L3.988|
000372  6800              LDR      r0,[r0,#0]  ; predictor
000374  f7fffffe          BL       abs
000378  4607              MOV      r7,r0
00037a  4621              MOV      r1,r4
00037c  f7fffffe          BL       __aeabi_cfrcmple
000380  d216              BCS      |L3.944|
;;;139    		       && abs(predictor) < abs(count_dest))			   
000382  4817              LDR      r0,|L3.992|
000384  6800              LDR      r0,[r0,#0]  ; count_dest
000386  f7fffffe          BL       abs
00038a  4604              MOV      r4,r0
00038c  4813              LDR      r0,|L3.988|
00038e  6800              LDR      r0,[r0,#0]  ; predictor
000390  f7fffffe          BL       abs
000394  4605              MOV      r5,r0
000396  4621              MOV      r1,r4
000398  f7fffffe          BL       __aeabi_cfcmple
00039c  d208              BCS      |L3.944|
;;;140    			count_input=sqrt_rt2+offset;
00039e  4812              LDR      r0,|L3.1000|
0003a0  6801              LDR      r1,[r0,#0]  ; offset
0003a2  4814              LDR      r0,|L3.1012|
0003a4  6800              LDR      r0,[r0,#0]  ; sqrt_rt2
0003a6  f7fffffe          BL       __aeabi_fadd
0003aa  4916              LDR      r1,|L3.1028|
0003ac  6008              STR      r0,[r1,#0]  ; count_input
0003ae  e005              B        |L3.956|
                  |L3.944|
;;;141    		else 
;;;142    		{
;;;143    		    reach_token=1;
0003b0  2001              MOVS     r0,#1
0003b2  4915              LDR      r1,|L3.1032|
0003b4  7008              STRB     r0,[r1,#0]
;;;144    			count_input=0;
0003b6  2000              MOVS     r0,#0
0003b8  4912              LDR      r1,|L3.1028|
0003ba  6008              STR      r0,[r1,#0]  ; count_input
                  |L3.956|
;;;145    		}
;;;146    	}
;;;147    
;;;148    	r_count=count_input;
0003bc  4811              LDR      r0,|L3.1028|
0003be  6800              LDR      r0,[r0,#0]  ; count_input
0003c0  4912              LDR      r1,|L3.1036|
0003c2  6008              STR      r0,[r1,#0]  ; r_count
;;;149    
;;;150        	
;;;151    }	 
0003c4  e8bd9ff0          POP      {r4-r12,pc}
;;;152    
                          ENDP

                  |L3.968|
                          DCD      d_cal
                  |L3.972|
                          DCD      count_init
                  |L3.976|
                          DCD      count_total
                  |L3.980|
                          DCD      predict_parameter
                  |L3.984|
                          DCD      d_count
                  |L3.988|
                          DCD      predictor
                  |L3.992|
                          DCD      count_dest
                  |L3.996|
                          DCD      0x40a00000
                  |L3.1000|
                          DCD      offset
                  |L3.1004|
                          DCD      max_acc
                  |L3.1008|
                          DCD      sqrt_rt1
                  |L3.1012|
                          DCD      sqrt_rt2
                  |L3.1016|
                          DCD      max_pwm
                  |L3.1020|
                          DCD      max_speed
                  |L3.1024|
                          DCD      0xc0a00000
                  |L3.1028|
                          DCD      count_input
                  |L3.1032|
                          DCD      reach_token
                  |L3.1036|
                          DCD      r_count

                          AREA ||i.pos_err||, CODE, READONLY, ALIGN=1

                  pos_err PROC
;;;80     
;;;81     void pos_err(void)
000000  4770              BX       lr
;;;82     {
;;;83        
;;;84     }
;;;85     
                          ENDP


                          AREA ||i.pos_get_curr||, CODE, READONLY, ALIGN=2

                  pos_get_curr PROC
;;;64     //is a command
;;;65     float pos_get_curr(void)
000000  4801              LDR      r0,|L5.8|
;;;66     {
;;;67      	return count_total;
000002  6800              LDR      r0,[r0,#0]  ; count_total
;;;68     }
000004  4770              BX       lr
;;;69     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      count_total

                          AREA ||i.pos_move||, CODE, READONLY, ALIGN=2

                  pos_move PROC
;;;162    
;;;163    void pos_move(u8 mode)
000000  b570              PUSH     {r4-r6,lr}
;;;164    {
000002  4604              MOV      r4,r0
;;;165    	if (abs(count_dest) > abs(predictor))
000004  480a              LDR      r0,|L6.48|
000006  6800              LDR      r0,[r0,#0]  ; predictor
000008  f7fffffe          BL       abs
00000c  4605              MOV      r5,r0
00000e  4809              LDR      r0,|L6.52|
000010  6800              LDR      r0,[r0,#0]  ; count_dest
000012  f7fffffe          BL       abs
000016  4606              MOV      r6,r0
000018  4629              MOV      r1,r5
00001a  f7fffffe          BL       __aeabi_cfrcmple
00001e  d203              BCS      |L6.40|
;;;166    		pos_move_function_mode(mode);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       pos_move_function_mode
000026  e002              B        |L6.46|
                  |L6.40|
;;;167    	else 
;;;168    		enable_bar=2;
000028  2002              MOVS     r0,#2
00002a  4903              LDR      r1,|L6.56|
00002c  7008              STRB     r0,[r1,#0]
                  |L6.46|
;;;169    	    
;;;170    }
00002e  bd70              POP      {r4-r6,pc}
;;;171    
                          ENDP

                  |L6.48|
                          DCD      predictor
                  |L6.52|
                          DCD      count_dest
                  |L6.56|
                          DCD      enable_bar

                          AREA ||i.pos_move_function_mode||, CODE, READONLY, ALIGN=2

                  pos_move_function_mode PROC
;;;154    
;;;155    void pos_move_function_mode(u8 mode)
000000  b510              PUSH     {r4,lr}
;;;156    {
000002  4604              MOV      r4,r0
;;;157        if (ticks%10==0) 
000004  4806              LDR      r0,|L7.32|
000006  8800              LDRH     r0,[r0,#0]  ; ticks
000008  210a              MOVS     r1,#0xa
00000a  fb90f2f1          SDIV     r2,r0,r1
00000e  fb010012          MLS      r0,r1,r2,r0
000012  b908              CBNZ     r0,|L7.24|
;;;158    	    pos_cal_function_mode();
000014  f7fffffe          BL       pos_cal_function_mode
                  |L7.24|
;;;159    
;;;160    	vel_move(mode);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       vel_move
;;;161    }
00001e  bd10              POP      {r4,pc}
;;;162    
                          ENDP

                  |L7.32|
                          DCD      ticks

                          AREA ||i.pos_set_home||, CODE, READONLY, ALIGN=2

                  pos_set_home PROC
;;;70     //is a command
;;;71     void pos_set_home(void)
000000  2000              MOVS     r0,#0
;;;72     {
;;;73     	count_total = 0;
000002  4906              LDR      r1,|L8.28|
000004  6008              STR      r0,[r1,#0]  ; count_total
;;;74     	count_dest = 0;
000006  4906              LDR      r1,|L8.32|
000008  6008              STR      r0,[r1,#0]  ; count_dest
;;;75     //	pwm=0;
;;;76     	reach_token = 0;
00000a  4906              LDR      r1,|L8.36|
00000c  7008              STRB     r0,[r1,#0]
;;;77     	predictor=0;
00000e  4906              LDR      r1,|L8.40|
000010  6008              STR      r0,[r1,#0]  ; predictor
;;;78     	count_init = d_cal;
000012  4806              LDR      r0,|L8.44|
000014  6800              LDR      r0,[r0,#0]  ; d_cal
000016  4906              LDR      r1,|L8.48|
000018  6008              STR      r0,[r1,#0]  ; count_init
;;;79     }
00001a  4770              BX       lr
;;;80     
                          ENDP

                  |L8.28|
                          DCD      count_total
                  |L8.32|
                          DCD      count_dest
                  |L8.36|
                          DCD      reach_token
                  |L8.40|
                          DCD      predictor
                  |L8.44|
                          DCD      d_cal
                  |L8.48|
                          DCD      count_init

                          AREA ||i.pos_set_max||, CODE, READONLY, ALIGN=2

                  pos_set_max PROC
;;;57     //is a command
;;;58     void pos_set_max(float _acc, float _pwm)
000000  4a02              LDR      r2,|L9.12|
;;;59     {
;;;60     	max_acc = _acc;
000002  6010              STR      r0,[r2,#0]  ; max_acc
;;;61     	max_pwm = _pwm;
000004  4a02              LDR      r2,|L9.16|
000006  6011              STR      r1,[r2,#0]  ; max_pwm
;;;62     }
000008  4770              BX       lr
;;;63     
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      max_acc
                  |L9.16|
                          DCD      max_pwm

                          AREA ||i.pos_set_pid||, CODE, READONLY, ALIGN=1

                  pos_set_pid PROC
;;;51     //is a command
;;;52     void pos_set_pid(float _p, float _i, float _d)
000000  4770              BX       lr
;;;53     {
;;;54     
;;;55     }
;;;56     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  kp_pos
000000  00000000          DCFS     0x00000000 ; 0
                  ki_pos
000004  00000000          DCFS     0x00000000 ; 0
                  kd_pos
000008  00000000          DCFS     0x00000000 ; 0
                  max_acc
00000c  40400000          DCFS     0x40400000 ; 3
                  max_pwm
000010  43960000          DCFS     0x43960000 ; 300
                  min_ac
000014  00000000          DCFS     0x00000000 ; 0
                  count_total
000018  00000000          DCFS     0x00000000 ; 0
                  count_init
00001c  00000000          DCFS     0x00000000 ; 0
                  predictor
000020  00000000          DCFS     0x00000000 ; 0
                  predict_parameter
000024  00000000          DCFS     0x00000000 ; 0
                  count_dest
000028  00000000          DCFS     0x00000000 ; 0
                  count_dest_p
00002c  00000000          DCFS     0x00000000 ; 0
                  prev_pwm
000030  00000000          DCFS     0x00000000 ; 0
                  count_input
000034  00000000          DCFS     0x00000000 ; 0
                  encoder_count
                          DCD      0x00000000
                  reach_token
00003c  00                DCB      0x00
                  mode_bar
00003d  000000            DCB      0x00,0x00,0x00
                  offset
                          DCD      0x00000000
                  sqrt_rt1
                          DCD      0x00000000
                  sqrt_rt2
                          DCD      0x00000000
                  max_speed
                          DCD      0x00000000
