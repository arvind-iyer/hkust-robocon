; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_spi.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I"C:\Users\Kenneth Au\Desktop\toKenneth\Complicated Big Motor Control\(encoder)24V Big Blue Black Motor Control June 7\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=513 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\obj\stm32f10x_spi.crf FWlib\SRC\stm32f10x_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;381      */
;;;382    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L1.12|
;;;383    {
;;;384      /* Check the parameters */
;;;385      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;386      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;387      if (NewState != DISABLE)
;;;388      {
;;;389        /* Enable the selected SPI peripheral (in I2S mode) */
;;;390        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
000002  8b82              LDRH     r2,[r0,#0x1c]
000004  f4426280          ORR      r2,r2,#0x400
000008  8382              STRH     r2,[r0,#0x1c]
00000a  e004              B        |L1.22|
                  |L1.12|
;;;391      }
;;;392      else
;;;393      {
;;;394        /* Disable the selected SPI peripheral (in I2S mode) */
;;;395        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
00000c  8b82              LDRH     r2,[r0,#0x1c]
00000e  f64f33ff          MOV      r3,#0xfbff
000012  401a              ANDS     r2,r2,r3
000014  8382              STRH     r2,[r0,#0x1c]
                  |L1.22|
;;;396      }
;;;397    }
000016  4770              BX       lr
;;;398    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=1

                  I2S_Init PROC
;;;204      */
;;;205    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;206    {
000004  b086              SUB      sp,sp,#0x18
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
;;;207      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
00000a  f04f0900          MOV      r9,#0
00000e  2702              MOVS     r7,#2
000010  f04f0800          MOV      r8,#0
000014  f04f0a01          MOV      r10,#1
;;;208      uint32_t tmp = 0;
000018  2600              MOVS     r6,#0
;;;209      RCC_ClocksTypeDef RCC_Clocks;
;;;210       
;;;211      /* Check the I2S parameters */
;;;212      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;213      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;214      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;215      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;216      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;217      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;218      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;219    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;220      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;221      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00001a  8ba8              LDRH     r0,[r5,#0x1c]
00001c  f24f0140          MOV      r1,#0xf040
000020  4008              ANDS     r0,r0,r1
000022  83a8              STRH     r0,[r5,#0x1c]
;;;222      SPIx->I2SPR = 0x0002;
000024  2002              MOVS     r0,#2
000026  8428              STRH     r0,[r5,#0x20]
;;;223      
;;;224      /* Get the I2SCFGR register value */
;;;225      tmpreg = SPIx->I2SCFGR;
000028  f8b5901c          LDRH     r9,[r5,#0x1c]
;;;226      
;;;227      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;228      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00002c  8920              LDRH     r0,[r4,#8]
00002e  2802              CMP      r0,#2
000030  d101              BNE      |L2.54|
;;;229      {
;;;230        i2sodd = (uint16_t)0;
000032  bf00              NOP      
;;;231        i2sdiv = (uint16_t)2;   
000034  e031              B        |L2.154|
                  |L2.54|
;;;232      }
;;;233      /* If the requested audio frequency is not the default, compute the prescaler */
;;;234      else
;;;235      {
;;;236        /* Check the frame length (For the Prescaler computing) */
;;;237        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000036  88a0              LDRH     r0,[r4,#4]
000038  b910              CBNZ     r0,|L2.64|
;;;238        {
;;;239          /* Packet length is 16 bits */
;;;240          packetlength = 1;
00003a  f04f0a01          MOV      r10,#1
00003e  e001              B        |L2.68|
                  |L2.64|
;;;241        }
;;;242        else
;;;243        {
;;;244          /* Packet length is 32 bits */
;;;245          packetlength = 2;
000040  f04f0a02          MOV      r10,#2
                  |L2.68|
;;;246        }
;;;247        /* Get System Clock frequency */
;;;248        RCC_GetClocksFreq(&RCC_Clocks);
000044  a801              ADD      r0,sp,#4
000046  f7fffffe          BL       RCC_GetClocksFreq
;;;249        
;;;250        /* Compute the Real divider depending on the MCLK output state with a flaoting point */
;;;251        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00004a  88e0              LDRH     r0,[r4,#6]
00004c  f5b07f00          CMP      r0,#0x200
000050  d10a              BNE      |L2.104|
;;;252        {
;;;253          /* MCLK output is enabled */
;;;254          tmp = (uint16_t)(((10 * RCC_Clocks.SYSCLK_Frequency) / (256 * I2S_InitStruct->I2S_AudioFreq)) + 5);
000052  9801              LDR      r0,[sp,#4]
000054  eb000080          ADD      r0,r0,r0,LSL #2
000058  0040              LSLS     r0,r0,#1
00005a  8921              LDRH     r1,[r4,#8]
00005c  0209              LSLS     r1,r1,#8
00005e  fbb0f0f1          UDIV     r0,r0,r1
000062  1d40              ADDS     r0,r0,#5
000064  b286              UXTH     r6,r0
000066  e00b              B        |L2.128|
                  |L2.104|
;;;255        }
;;;256        else
;;;257        {
;;;258          /* MCLK output is disabled */
;;;259          tmp = (uint16_t)(((10 * RCC_Clocks.SYSCLK_Frequency) / (32 * packetlength * I2S_InitStruct->I2S_AudioFreq)) + 5);
000068  ea4f104a          LSL      r0,r10,#5
00006c  8921              LDRH     r1,[r4,#8]
00006e  4348              MULS     r0,r1,r0
000070  9901              LDR      r1,[sp,#4]
000072  eb010181          ADD      r1,r1,r1,LSL #2
000076  0049              LSLS     r1,r1,#1
000078  fbb1f0f0          UDIV     r0,r1,r0
00007c  1d40              ADDS     r0,r0,#5
00007e  b286              UXTH     r6,r0
                  |L2.128|
;;;260        }
;;;261        
;;;262        /* Remove the flaoting point */
;;;263        tmp = tmp/10;  
000080  200a              MOVS     r0,#0xa
000082  fbb6f6f0          UDIV     r6,r6,r0
;;;264          
;;;265        /* Check the parity of the divider */
;;;266        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000086  f0060801          AND      r8,r6,#1
;;;267       
;;;268        /* Compute the i2sdiv prescaler */
;;;269        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
00008a  eba60008          SUB      r0,r6,r8
00008e  f3c0074f          UBFX     r7,r0,#1,#16
;;;270       
;;;271        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;272        i2sodd = (uint16_t) (i2sodd << 8);
000092  f64f70ff          MOV      r0,#0xffff
000096  ea002808          AND      r8,r0,r8,LSL #8
                  |L2.154|
;;;273      }
;;;274      
;;;275      /* Test if the divider is 1 or 0 */
;;;276      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
00009a  2f02              CMP      r7,#2
00009c  db01              BLT      |L2.162|
00009e  2fff              CMP      r7,#0xff
0000a0  dd02              BLE      |L2.168|
                  |L2.162|
;;;277      {
;;;278        /* Set the default values */
;;;279        i2sdiv = 2;
0000a2  2702              MOVS     r7,#2
;;;280        i2sodd = 0;
0000a4  f04f0800          MOV      r8,#0
                  |L2.168|
;;;281      }
;;;282      /* Write to SPIx I2SPR register the computed value */
;;;283      SPIx->I2SPR = (uint16_t)(i2sdiv | i2sodd | I2S_InitStruct->I2S_MCLKOutput);  
0000a8  ea470008          ORR      r0,r7,r8
0000ac  88e1              LDRH     r1,[r4,#6]
0000ae  4308              ORRS     r0,r0,r1
0000b0  8428              STRH     r0,[r5,#0x20]
;;;284     
;;;285      /* Configure the I2S with the SPI_InitStruct values */
;;;286      tmpreg |= (uint16_t)(I2S_Mode_Select | I2S_InitStruct->I2S_Mode | \
0000b2  8820              LDRH     r0,[r4,#0]
0000b4  f4406000          ORR      r0,r0,#0x800
0000b8  8861              LDRH     r1,[r4,#2]
0000ba  4308              ORRS     r0,r0,r1
0000bc  88a1              LDRH     r1,[r4,#4]
0000be  4308              ORRS     r0,r0,r1
0000c0  8961              LDRH     r1,[r4,#0xa]
0000c2  4308              ORRS     r0,r0,r1
0000c4  ea400909          ORR      r9,r0,r9
;;;287                      I2S_InitStruct->I2S_Standard | I2S_InitStruct->I2S_DataFormat | \
;;;288                      I2S_InitStruct->I2S_CPOL);
;;;289     
;;;290      /* Write to SPIx I2SCFGR */
;;;291      SPIx->I2SCFGR = tmpreg;
0000c8  f8a5901c          STRH     r9,[r5,#0x1c]
;;;292    }
0000cc  b006              ADD      sp,sp,#0x18
0000ce  e8bd87f0          POP      {r4-r10,pc}
;;;293    
                          ENDP


                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;328      */
;;;329    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;330    {
;;;331    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;332      /* Initialize the I2S_Mode member */
;;;333      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;334      
;;;335      /* Initialize the I2S_Standard member */
;;;336      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;337      
;;;338      /* Initialize the I2S_DataFormat member */
;;;339      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;340      
;;;341      /* Initialize the I2S_MCLKOutput member */
;;;342      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;343      
;;;344      /* Initialize the I2S_AudioFreq member */
;;;345      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2102              MOVS     r1,#2
00000c  8101              STRH     r1,[r0,#8]
;;;346      
;;;347      /* Initialize the I2S_CPOL member */
;;;348      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000e  2100              MOVS     r1,#0
000010  8141              STRH     r1,[r0,#0xa]
;;;349    }
000012  4770              BX       lr
;;;350    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;667      */
;;;668    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;669    {
;;;670      /* Check the parameters */
;;;671      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;672      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;673      if (SPI_Direction == SPI_Direction_Tx)
000004  d104              BNE      |L4.16|
;;;674      {
;;;675        /* Set the Tx only mode */
;;;676        SPIx->CR1 |= SPI_Direction_Tx;
000006  8802              LDRH     r2,[r0,#0]
000008  f4424280          ORR      r2,r2,#0x4000
00000c  8002              STRH     r2,[r0,#0]
00000e  e004              B        |L4.26|
                  |L4.16|
;;;677      }
;;;678      else
;;;679      {
;;;680        /* Set the Rx only mode */
;;;681        SPIx->CR1 &= SPI_Direction_Rx;
000010  8802              LDRH     r2,[r0,#0]
000012  f64b73ff          MOV      r3,#0xbfff
000016  401a              ANDS     r2,r2,r3
000018  8002              STRH     r2,[r0,#0]
                  |L4.26|
;;;682      }
;;;683    }
00001a  4770              BX       lr
;;;684    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;595      */
;;;596    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L5.12|
;;;597    {
;;;598      /* Check the parameters */
;;;599      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;600      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;601      if (NewState != DISABLE)
;;;602      {
;;;603        /* Enable the selected SPI CRC calculation */
;;;604        SPIx->CR1 |= CR1_CRCEN_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L5.22|
                  |L5.12|
;;;605      }
;;;606      else
;;;607      {
;;;608        /* Disable the selected SPI CRC calculation */
;;;609        SPIx->CR1 &= CR1_CRCEN_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L5.22|
;;;610      }
;;;611    }
000016  4770              BX       lr
;;;612    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;357      */
;;;358    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L6.12|
;;;359    {
;;;360      /* Check the parameters */
;;;361      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;362      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;363      if (NewState != DISABLE)
;;;364      {
;;;365        /* Enable the selected SPI peripheral */
;;;366        SPIx->CR1 |= CR1_SPE_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f0420240          ORR      r2,r2,#0x40
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L6.22|
                  |L6.12|
;;;367      }
;;;368      else
;;;369      {
;;;370        /* Disable the selected SPI peripheral */
;;;371        SPIx->CR1 &= CR1_SPE_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64f73bf          MOV      r3,#0xffbf
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L6.22|
;;;372      }
;;;373    }
000016  4770              BX       lr
;;;374    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;562      */
;;;563    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;564    {
;;;565      /* Check the parameters */
;;;566      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;567      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;568      /* Clear DFF bit */
;;;569      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8002              STRH     r2,[r0,#0]
;;;570      /* Set new DFF bit value */
;;;571      SPIx->CR1 |= SPI_DataSize;
00000a  8802              LDRH     r2,[r0,#0]
00000c  430a              ORRS     r2,r2,r1
00000e  8002              STRH     r2,[r0,#0]
;;;572    }
000010  4770              BX       lr
;;;573    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;622      */
;;;623    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  4602              MOV      r2,r0
;;;624    {
;;;625      uint16_t crcreg = 0;
000002  2000              MOVS     r0,#0
;;;626      /* Check the parameters */
;;;627      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;628      assert_param(IS_SPI_CRC(SPI_CRC));
;;;629      if (SPI_CRC != SPI_CRC_Rx)
000004  2901              CMP      r1,#1
000006  d001              BEQ      |L8.12|
;;;630      {
;;;631        /* Get the Tx CRC register */
;;;632        crcreg = SPIx->TXCRCR;
000008  8b10              LDRH     r0,[r2,#0x18]
00000a  e000              B        |L8.14|
                  |L8.12|
;;;633      }
;;;634      else
;;;635      {
;;;636        /* Get the Rx CRC register */
;;;637        crcreg = SPIx->RXCRCR;
00000c  8a90              LDRH     r0,[r2,#0x14]
                  |L8.14|
;;;638      }
;;;639      /* Return the selected CRC register */
;;;640      return crcreg;
;;;641    }
00000e  4770              BX       lr
;;;642    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;647      */
;;;648    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;649    {
;;;650      /* Check the parameters */
;;;651      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;652      
;;;653      /* Return the CRC polynomial register */
;;;654      return SPIx->CRCPR;
000002  8a08              LDRH     r0,[r1,#0x10]
;;;655    }
000004  4770              BX       lr
;;;656    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;739      */
;;;740    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43ca              MVNS     r2,r1
;;;741    {
;;;742      /* Check the parameters */
;;;743      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;744      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;745        
;;;746        /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;747        SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8102              STRH     r2,[r0,#8]
;;;748    }
000004  4770              BX       lr
;;;749    
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;812      */
;;;813    void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;814    {
;;;815      uint16_t itpos = 0;
000002  2200              MOVS     r2,#0
;;;816      /* Check the parameters */
;;;817      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;818      assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;819      /* Get the SPI IT index */
;;;820      itpos = (uint16_t)((uint16_t)0x01 << (SPI_I2S_IT & (uint8_t)0x0F));
000004  f001040f          AND      r4,r1,#0xf
000008  2301              MOVS     r3,#1
00000a  40a3              LSLS     r3,r3,r4
00000c  b29a              UXTH     r2,r3
;;;821      /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;822      SPIx->SR = (uint16_t)~itpos;
00000e  43d3              MVNS     r3,r2
000010  8103              STRH     r3,[r0,#8]
;;;823    }
000012  bd10              POP      {r4,pc}
;;;824    /**
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;451      */
;;;452    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  b11a              CBZ      r2,|L12.10|
;;;453    {
;;;454      /* Check the parameters */
;;;455      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;456      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;457      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;458      if (NewState != DISABLE)
;;;459      {
;;;460        /* Enable the selected SPI/I2S DMA requests */
;;;461        SPIx->CR2 |= SPI_I2S_DMAReq;
000002  8883              LDRH     r3,[r0,#4]
000004  430b              ORRS     r3,r3,r1
000006  8083              STRH     r3,[r0,#4]
000008  e002              B        |L12.16|
                  |L12.10|
;;;462      }
;;;463      else
;;;464      {
;;;465        /* Disable the selected SPI/I2S DMA requests */
;;;466        SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
00000a  8883              LDRH     r3,[r0,#4]
00000c  438b              BICS     r3,r3,r1
00000e  8083              STRH     r3,[r0,#4]
                  |L12.16|
;;;467      }
;;;468    }
000010  4770              BX       lr
;;;469    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;111      */
;;;112    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;113    {
000002  4604              MOV      r4,r0
;;;114      /* Check the parameters */
;;;115      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;116      
;;;117      switch (*(uint32_t*)&SPIx)
000004  4814              LDR      r0,|L13.88|
000006  4420              ADD      r0,r0,r4
000008  b178              CBZ      r0,|L13.42|
00000a  f5b06f80          CMP      r0,#0x400
00000e  d016              BEQ      |L13.62|
000010  f5b04f78          CMP      r0,#0xf800
000014  d11d              BNE      |L13.82|
;;;118      {
;;;119        case SPI1_BASE:
;;;120          /* Enable SPI1 reset state */
;;;121          RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000016  2101              MOVS     r1,#1
000018  0308              LSLS     r0,r1,#12
00001a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;122          /* Release SPI1 from reset state */
;;;123          RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
00001e  2100              MOVS     r1,#0
000020  f44f5080          MOV      r0,#0x1000
000024  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;124          break;
000028  e014              B        |L13.84|
                  |L13.42|
;;;125        case SPI2_BASE:
;;;126          /* Enable SPI2 reset state */
;;;127          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  0388              LSLS     r0,r1,#14
00002e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;128          /* Release SPI2 from reset state */
;;;129          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000032  2100              MOVS     r1,#0
000034  f44f4080          MOV      r0,#0x4000
000038  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;130          break;
00003c  e00a              B        |L13.84|
                  |L13.62|
;;;131        case SPI3_BASE:
;;;132          /* Enable SPI3 reset state */
;;;133          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
00003e  2101              MOVS     r1,#1
000040  03c8              LSLS     r0,r1,#15
000042  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;134          /* Release SPI3 from reset state */
;;;135          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
000046  2100              MOVS     r1,#0
000048  f44f4000          MOV      r0,#0x8000
00004c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;136          break;
000050  e000              B        |L13.84|
                  |L13.82|
;;;137        default:
;;;138          break;
000052  bf00              NOP      
                  |L13.84|
000054  bf00              NOP                            ;124
;;;139      }
;;;140    }
000056  bd10              POP      {r4,pc}
;;;141    
                          ENDP

                  |L13.88|
                          DCD      0xbfffc800

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;701      */
;;;702    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;703    {
;;;704      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;705      /* Check the parameters */
;;;706      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;707      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;708      /* Check the status of the specified SPI/I2S flag */
;;;709      if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8913              LDRH     r3,[r2,#8]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L14.14|
;;;710      {
;;;711        /* SPI_I2S_FLAG is set */
;;;712        bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L14.16|
                  |L14.14|
;;;713      }
;;;714      else
;;;715      {
;;;716        /* SPI_I2S_FLAG is reset */
;;;717        bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;718      }
;;;719      /* Return the SPI_I2S_FLAG status */
;;;720      return  bitstatus;
;;;721    }
000010  4770              BX       lr
;;;722    
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;764      */
;;;765    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b5f0              PUSH     {r4-r7,lr}
;;;766    {
000002  4602              MOV      r2,r0
;;;767      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;768      uint16_t itpos = 0, itmask = 0, enablestatus = 0;
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
00000a  2500              MOVS     r5,#0
;;;769      /* Check the parameters */
;;;770      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;771      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;772      /* Get the SPI/I2S IT index */
;;;773      itpos = (uint16_t)((uint16_t)0x01 << (SPI_I2S_IT & (uint8_t)0x0F));
00000c  f001070f          AND      r7,r1,#0xf
000010  2601              MOVS     r6,#1
000012  40be              LSLS     r6,r6,r7
000014  b2b4              UXTH     r4,r6
;;;774      /* Get the SPI/I2S IT mask */
;;;775      itmask = SPI_I2S_IT >> 4;
000016  110b              ASRS     r3,r1,#4
;;;776      /* Set the IT mask */
;;;777      itmask = (uint16_t)((uint16_t)0x01 << itmask);
000018  2601              MOVS     r6,#1
00001a  409e              LSLS     r6,r6,r3
00001c  b2b3              UXTH     r3,r6
;;;778      /* Get the SPI_I2S_IT enable bit status */
;;;779      enablestatus = (SPIx->CR2 & itmask) ;
00001e  8896              LDRH     r6,[r2,#4]
000020  ea060503          AND      r5,r6,r3
;;;780      /* Check the status of the specified SPI/I2S interrupt */
;;;781      if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
000024  8916              LDRH     r6,[r2,#8]
000026  4026              ANDS     r6,r6,r4
000028  b116              CBZ      r6,|L15.48|
00002a  b10d              CBZ      r5,|L15.48|
;;;782      {
;;;783        /* SPI_I2S_IT is set */
;;;784        bitstatus = SET;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L15.50|
                  |L15.48|
;;;785      }
;;;786      else
;;;787      {
;;;788        /* SPI_I2S_IT is reset */
;;;789        bitstatus = RESET;
000030  2000              MOVS     r0,#0
                  |L15.50|
;;;790      }
;;;791      /* Return the SPI_I2S_IT status */
;;;792      return bitstatus;
;;;793    }
000032  bdf0              POP      {r4-r7,pc}
;;;794    
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;413      */
;;;414    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;415    {
;;;416      uint16_t itpos = 0, itmask = 0 ;
000002  2400              MOVS     r4,#0
000004  2300              MOVS     r3,#0
;;;417      /* Check the parameters */
;;;418      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;419      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;420      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;421      /* Get the SPI/I2S IT index */
;;;422      itpos = SPI_I2S_IT >> 4;
000006  110c              ASRS     r4,r1,#4
;;;423      /* Set the IT mask */
;;;424      itmask = (uint16_t)((uint16_t)1 << itpos);
000008  2501              MOVS     r5,#1
00000a  40a5              LSLS     r5,r5,r4
00000c  b2ab              UXTH     r3,r5
;;;425      if (NewState != DISABLE)
00000e  b11a              CBZ      r2,|L16.24|
;;;426      {
;;;427        /* Enable the selected SPI/I2S interrupt */
;;;428        SPIx->CR2 |= itmask;
000010  8885              LDRH     r5,[r0,#4]
000012  431d              ORRS     r5,r5,r3
000014  8085              STRH     r5,[r0,#4]
000016  e002              B        |L16.30|
                  |L16.24|
;;;429      }
;;;430      else
;;;431      {
;;;432        /* Disable the selected SPI/I2S interrupt */
;;;433        SPIx->CR2 &= (uint16_t)~itmask;
000018  8885              LDRH     r5,[r0,#4]
00001a  439d              BICS     r5,r5,r3
00001c  8085              STRH     r5,[r0,#4]
                  |L16.30|
;;;434      }
;;;435    }
00001e  bd30              POP      {r4,r5,pc}
;;;436    
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;493      */
;;;494    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;495    {
;;;496      /* Check the parameters */
;;;497      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;498      
;;;499      /* Return the data in the DR register */
;;;500      return SPIx->DR;
000002  8988              LDRH     r0,[r1,#0xc]
;;;501    }
000004  4770              BX       lr
;;;502    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;477      */
;;;478    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;479    {
;;;480      /* Check the parameters */
;;;481      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;482      
;;;483      /* Write in the DR register the data to be sent */
;;;484      SPIx->DR = Data;
;;;485    }
000002  4770              BX       lr
;;;486    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;150      */
;;;151    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;152    {
;;;153      uint16_t tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;154      
;;;155      /* check the parameters */
;;;156      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
;;;157      
;;;158      /* Check the SPI parameters */
;;;159      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;160      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;161      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;162      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;163      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;164      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;165      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;166      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;167      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;168    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;169      /* Get the SPIx CR1 value */
;;;170      tmpreg = SPIx->CR1;
000004  8802              LDRH     r2,[r0,#0]
;;;171      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;172      tmpreg &= CR1_CLEAR_Mask;
000006  f4025241          AND      r2,r2,#0x3040
;;;173      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;174         master/salve mode, CPOL and CPHA */
;;;175      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;176      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;177      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;178      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;179      /* Set CPOL bit according to SPI_CPOL value */
;;;180      /* Set CPHA bit according to SPI_CPHA value */
;;;181      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
00000a  880b              LDRH     r3,[r1,#0]
00000c  884c              LDRH     r4,[r1,#2]
00000e  4323              ORRS     r3,r3,r4
000010  888c              LDRH     r4,[r1,#4]
000012  4323              ORRS     r3,r3,r4
000014  88cc              LDRH     r4,[r1,#6]
000016  4323              ORRS     r3,r3,r4
000018  890c              LDRH     r4,[r1,#8]
00001a  4323              ORRS     r3,r3,r4
00001c  894c              LDRH     r4,[r1,#0xa]
00001e  4323              ORRS     r3,r3,r4
000020  898c              LDRH     r4,[r1,#0xc]
000022  4323              ORRS     r3,r3,r4
000024  89cc              LDRH     r4,[r1,#0xe]
000026  4323              ORRS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
;;;182                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;183                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;184                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;185      /* Write to SPIx CR1 */
;;;186      SPIx->CR1 = tmpreg;
00002a  8002              STRH     r2,[r0,#0]
;;;187      
;;;188      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;189      SPIx->I2SCFGR &= SPI_Mode_Select;		
00002c  8b83              LDRH     r3,[r0,#0x1c]
00002e  f24f74ff          MOV      r4,#0xf7ff
000032  4023              ANDS     r3,r3,r4
000034  8383              STRH     r3,[r0,#0x1c]
;;;190    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;191      /* Write to SPIx CRCPOLY */
;;;192      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000036  8a0b              LDRH     r3,[r1,#0x10]
000038  8203              STRH     r3,[r0,#0x10]
;;;193    }
00003a  bd10              POP      {r4,pc}
;;;194    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;512      */
;;;513    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f64f62ff          MOV      r2,#0xfeff
;;;514    {
;;;515      /* Check the parameters */
;;;516      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;517      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;518      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
000004  4291              CMP      r1,r2
000006  d004              BEQ      |L20.18|
;;;519      {
;;;520        /* Set NSS pin internally by software */
;;;521        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
000008  8802              LDRH     r2,[r0,#0]
00000a  f4427280          ORR      r2,r2,#0x100
00000e  8002              STRH     r2,[r0,#0]
000010  e004              B        |L20.28|
                  |L20.18|
;;;522      }
;;;523      else
;;;524      {
;;;525        /* Reset NSS pin internally by software */
;;;526        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000012  8802              LDRH     r2,[r0,#0]
000014  f64f63ff          MOV      r3,#0xfeff
000018  401a              ANDS     r2,r2,r3
00001a  8002              STRH     r2,[r0,#0]
                  |L20.28|
;;;527      }
;;;528    }
00001c  4770              BX       lr
;;;529    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;536      */
;;;537    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L21.12|
;;;538    {
;;;539      /* Check the parameters */
;;;540      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;541      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;542      if (NewState != DISABLE)
;;;543      {
;;;544        /* Enable the selected SPI SS output */
;;;545        SPIx->CR2 |= CR2_SSOE_Set;
000002  8882              LDRH     r2,[r0,#4]
000004  f0420204          ORR      r2,r2,#4
000008  8082              STRH     r2,[r0,#4]
00000a  e004              B        |L21.22|
                  |L21.12|
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the selected SPI SS output */
;;;550        SPIx->CR2 &= CR2_SSOE_Reset;
00000c  8882              LDRH     r2,[r0,#4]
00000e  f64f73fb          MOV      r3,#0xfffb
000012  401a              ANDS     r2,r2,r3
000014  8082              STRH     r2,[r0,#4]
                  |L21.22|
;;;551      }
;;;552    }
000016  4770              BX       lr
;;;553    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;299      */
;;;300    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;301    {
;;;302    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;303      /* Initialize the SPI_Direction member */
;;;304      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;305      /* initialize the SPI_Mode member */
;;;306      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;307      /* initialize the SPI_DataSize member */
;;;308      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;309      /* Initialize the SPI_CPOL member */
;;;310      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;311      /* Initialize the SPI_CPHA member */
;;;312      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;313      /* Initialize the SPI_NSS member */
;;;314      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;315      /* Initialize the SPI_BaudRatePrescaler member */
;;;316      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;317      /* Initialize the SPI_FirstBit member */
;;;318      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;319      /* Initialize the SPI_CRCPolynomial member */
;;;320      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;321    }
000016  4770              BX       lr
;;;322    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;578      */
;;;579    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;580    {
;;;581      /* Check the parameters */
;;;582      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;583      
;;;584      /* Enable the selected SPI CRC transmission */
;;;585      SPIx->CR1 |= CR1_CRCNext_Set;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;586    }
000008  4770              BX       lr
;;;587    
                          ENDP

