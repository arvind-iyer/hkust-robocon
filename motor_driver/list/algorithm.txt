; generated by ARM C/C++ Compiler, 4.1 [Build 713]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\algorithm.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\algorithm.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -IE:\UST\Robocon2012\KEIL\ARM\CMSIS\Include -IE:\UST\Robocon2012\KEIL\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\algorithm.crf user\algorithm.c]
                          THUMB

                          AREA ||i.GUI_debug||, CODE, READONLY, ALIGN=2

                  GUI_debug PROC
;;;53     /*debug in MATLAB GUI*/
;;;54     void GUI_debug()
000000  b510              PUSH     {r4,lr}
;;;55     {	
;;;56     	USART_TX_BYTE(USART1, START_BYTE);	
000002  21aa              MOVS     r1,#0xaa
000004  4806              LDR      r0,|L1.32|
000006  f7fffffe          BL       USART_TX_BYTE
;;;57     	//USART_OUT16(USART1, &All_Data_Buffer[0], 32);	
;;;58     	USART_TX_BYTE(USART1, final_result);
00000a  4806              LDR      r0,|L1.36|
00000c  7801              LDRB     r1,[r0,#0]  ; final_result
00000e  4804              LDR      r0,|L1.32|
000010  f7fffffe          BL       USART_TX_BYTE
;;;59     	USART_OUT16(USART1, &result[0], 32);	
000014  2220              MOVS     r2,#0x20
000016  4904              LDR      r1,|L1.40|
000018  4801              LDR      r0,|L1.32|
00001a  f7fffffe          BL       USART_OUT16
;;;60     }
00001e  bd10              POP      {r4,pc}
;;;61     
                          ENDP

                  |L1.32|
                          DCD      0x40013800
                  |L1.36|
                          DCD      final_result
                  |L1.40|
                          DCD      result

                          AREA ||i.PUTTY_debug||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  PUTTY_debug PROC
;;;62     /*debug SPI communication*/
;;;63     void PUTTY_debug()
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65     	/*
;;;66     	u8 i = 0;
;;;67     	printf("SPI2 has received:");
;;;68     	for(i = 16; i < 32; i++)
;;;69     	{
;;;70     		printf("%ld, ", All_Data_Buffer[i]);	
;;;71     	}
;;;72     	printf("\n\r");
;;;73     	_delay_ms(50);
;;;74     	*/
;;;75     
;;;76     	u8 i = 0;
000002  f04f0400          MOV      r4,#0
;;;77     	for(i = 0; i < 32; i++)
000006  bf00              NOP      
000008  e008              B        |L2.28|
                  |L2.10|
;;;78     	{
;;;79     		printf("%ld ", result[i]);
00000a  4809              LDR      r0,|L2.48|
00000c  f8301014          LDRH     r1,[r0,r4,LSL #1]
000010  a008              ADR      r0,|L2.52|
000012  f7fffffe          BL       __2printf
000016  f1040001          ADD      r0,r4,#1              ;77
00001a  b2c4              UXTB     r4,r0                 ;77
                  |L2.28|
00001c  2c20              CMP      r4,#0x20              ;77
00001e  dbf4              BLT      |L2.10|
;;;80     	}
;;;81     	printf("\n\r");
000020  a006              ADR      r0,|L2.60|
000022  f7fffffe          BL       __2printf
;;;82     	_delay_ms(50);
000026  2032              MOVS     r0,#0x32
000028  f7fffffe          BL       _delay_ms
;;;83     }
00002c  bd10              POP      {r4,pc}
;;;84     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      result
                  |L2.52|
000034  256c6420          DCB      "%ld ",0
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0
                  |L2.60|
00003c  0a0d00            DCB      "\n\r",0
00003f  00                DCB      0

                          AREA ||i.average_filter||, CODE, READONLY, ALIGN=2

                  average_filter PROC
;;;14     
;;;15     void average_filter()
000000  b530              PUSH     {r4,r5,lr}
;;;16     {
;;;17     	u8 index = 0;
000002  f04f0000          MOV      r0,#0
;;;18     	u8 channel_index = 0;
000006  4601              MOV      r1,r0
;;;19     	u16 data_sum = 0;
000008  4602              MOV      r2,r0
;;;20     	for(index = 0; index < 16; index++)
00000a  bf00              NOP      
00000c  e01c              B        |L3.72|
                  |L3.14|
;;;21     	{
;;;22     		data_sum = 0;
00000e  f04f0200          MOV      r2,#0
;;;23     		for(channel_index = 0; channel_index < 10; channel_index++)
000012  4611              MOV      r1,r2
000014  e009              B        |L3.42|
                  |L3.22|
;;;24     		{
;;;25     			data_sum += (u16)(ADC_ConvertedValue[channel_index*16+index]);
000016  eb001301          ADD      r3,r0,r1,LSL #4
00001a  4c0d              LDR      r4,|L3.80|
00001c  f8343013          LDRH     r3,[r4,r3,LSL #1]
000020  4413              ADD      r3,r3,r2
000022  b29a              UXTH     r2,r3
000024  f1010301          ADD      r3,r1,#1              ;23
000028  b2d9              UXTB     r1,r3                 ;23
                  |L3.42|
00002a  290a              CMP      r1,#0xa               ;23
00002c  dbf3              BLT      |L3.22|
;;;26     		}
;;;27     		Filtered_Data_Buffer[index] = data_sum/16;
00002e  4613              MOV      r3,r2
000030  ea4f74e2          ASR      r4,r2,#31
000034  eb027414          ADD      r4,r2,r4,LSR #28
000038  ea4f1424          ASR      r4,r4,#4
00003c  4d05              LDR      r5,|L3.84|
00003e  f8254010          STRH     r4,[r5,r0,LSL #1]
000042  f1000301          ADD      r3,r0,#1              ;20
000046  b2d8              UXTB     r0,r3                 ;20
                  |L3.72|
000048  2810              CMP      r0,#0x10              ;20
00004a  dbe0              BLT      |L3.14|
;;;28     	}	
;;;29     }
00004c  bd30              POP      {r4,r5,pc}
;;;30     
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      ADC_ConvertedValue
                  |L3.84|
                          DCD      Filtered_Data_Buffer

                          AREA ||i.data_recombination||, CODE, READONLY, ALIGN=2

                  data_recombination PROC
;;;32     /*recombine the data received from core2*/
;;;33     void data_recombination()
000000  f04f0000          MOV      r0,#0
;;;34     {
;;;35     	u8 index = 0;
;;;36     	for(index=0;index<16;index++)
000004  bf00              NOP      
000006  e008              B        |L4.26|
                  |L4.8|
;;;37     	{
;;;38     		All_Data_Buffer[index] = Filtered_Data_Buffer[index];
000008  4918              LDR      r1,|L4.108|
00000a  f8311010          LDRH     r1,[r1,r0,LSL #1]
00000e  4a18              LDR      r2,|L4.112|
000010  f8221010          STRH     r1,[r2,r0,LSL #1]
000014  f1000101          ADD      r1,r0,#1              ;36
000018  b2c8              UXTB     r0,r1                 ;36
                  |L4.26|
00001a  2810              CMP      r0,#0x10              ;36
00001c  dbf4              BLT      |L4.8|
;;;39     	}
;;;40     	
;;;41     	/*raw data(from core2) recombination*/
;;;42     	for(index=0;index<16;index++)
00001e  f04f0000          MOV      r0,#0
000022  e010              B        |L4.70|
                  |L4.36|
;;;43     	{
;;;44     		ADC_ConvertedValue2[index] = ADC_ConvertedValue2_raw[index*2]*256+ADC_ConvertedValue2_raw[index*2+1];
000024  f04f0101          MOV      r1,#1
000028  eb010140          ADD      r1,r1,r0,LSL #1
00002c  4a11              LDR      r2,|L4.116|
00002e  5c52              LDRB     r2,[r2,r1]
000030  4910              LDR      r1,|L4.116|
000032  f8111010          LDRB     r1,[r1,r0,LSL #1]
000036  eb022101          ADD      r1,r2,r1,LSL #8
00003a  4a0f              LDR      r2,|L4.120|
00003c  f8221010          STRH     r1,[r2,r0,LSL #1]
000040  f1000101          ADD      r1,r0,#1              ;42
000044  b2c8              UXTB     r0,r1                 ;42
                  |L4.70|
000046  2810              CMP      r0,#0x10              ;42
000048  dbec              BLT      |L4.36|
;;;45     	}
;;;46     	
;;;47     	for(index=16;index<32;index++)
00004a  f04f0010          MOV      r0,#0x10
00004e  e00a              B        |L4.102|
                  |L4.80|
;;;48     	{
;;;49     		All_Data_Buffer[index] = (u16)(ADC_ConvertedValue2[index-16]);
000050  f1a00110          SUB      r1,r0,#0x10
000054  4a08              LDR      r2,|L4.120|
000056  f8321011          LDRH     r1,[r2,r1,LSL #1]
00005a  4a05              LDR      r2,|L4.112|
00005c  f8221010          STRH     r1,[r2,r0,LSL #1]
000060  f1000101          ADD      r1,r0,#1              ;47
000064  b2c8              UXTB     r0,r1                 ;47
                  |L4.102|
000066  2820              CMP      r0,#0x20              ;47
000068  dbf2              BLT      |L4.80|
;;;50     	}
;;;51     }
00006a  4770              BX       lr
;;;52     
                          ENDP

                  |L4.108|
                          DCD      Filtered_Data_Buffer
                  |L4.112|
                          DCD      All_Data_Buffer
                  |L4.116|
                          DCD      ADC_ConvertedValue2_raw
                  |L4.120|
                          DCD      ADC_ConvertedValue2

                          AREA ||i.linearization||, CODE, READONLY, ALIGN=2

                  linearization PROC
;;;85     /*linearization*/
;;;86     void linearization()
000000  b0a0              SUB      sp,sp,#0x80
;;;87     {
;;;88     	s32 temp[32];
;;;89     	u8 index = 0;
000002  f04f0000          MOV      r0,#0
;;;90     	for(index = 0; index < 32; index++)
000006  bf00              NOP      
000008  e038              B        |L5.124|
                  |L5.10|
;;;91     	{
;;;92     		temp[index] =  (u32)(((u16)(All_Data_Buffer[index]) -stored_min_voltage[index]));
00000a  491e              LDR      r1,|L5.132|
00000c  f8311010          LDRH     r1,[r1,r0,LSL #1]
000010  4a1d              LDR      r2,|L5.136|
000012  f8322010          LDRH     r2,[r2,r0,LSL #1]
000016  eba10102          SUB      r1,r1,r2
00001a  f84d1020          STR      r1,[sp,r0,LSL #2]
;;;93     		temp[index] = temp[index]*10000 / (stored_max_voltage[index] - stored_min_voltage[index]);
00001e  491b              LDR      r1,|L5.140|
000020  f8311010          LDRH     r1,[r1,r0,LSL #1]
000024  4a18              LDR      r2,|L5.136|
000026  f8322010          LDRH     r2,[r2,r0,LSL #1]
00002a  eba10202          SUB      r2,r1,r2
00002e  f85d1020          LDR      r1,[sp,r0,LSL #2]
000032  f2427310          MOV      r3,#0x2710
000036  fb01f103          MUL      r1,r1,r3
00003a  fb91f1f2          SDIV     r1,r1,r2
00003e  f84d1020          STR      r1,[sp,r0,LSL #2]
;;;94     		if(temp[index] < 0)
000042  f85d1020          LDR      r1,[sp,r0,LSL #2]
000046  2900              CMP      r1,#0
000048  da05              BGE      |L5.86|
;;;95     			result[index] = 0;
00004a  f04f0100          MOV      r1,#0
00004e  4a10              LDR      r2,|L5.144|
000050  f8221010          STRH     r1,[r2,r0,LSL #1]
000054  e00f              B        |L5.118|
                  |L5.86|
;;;96     		else if(temp[index] > 10000)
000056  f85d1020          LDR      r1,[sp,r0,LSL #2]
00005a  f2427210          MOV      r2,#0x2710
00005e  4291              CMP      r1,r2
000060  dd04              BLE      |L5.108|
;;;97     			result[index] = 10000;
000062  4611              MOV      r1,r2
000064  4a0a              LDR      r2,|L5.144|
000066  f8221010          STRH     r1,[r2,r0,LSL #1]
00006a  e004              B        |L5.118|
                  |L5.108|
;;;98     		else
;;;99     			result[index] = (u16)(temp[index]);
00006c  f85d1020          LDR      r1,[sp,r0,LSL #2]
000070  4a07              LDR      r2,|L5.144|
000072  f8221010          STRH     r1,[r2,r0,LSL #1]
                  |L5.118|
000076  f1000101          ADD      r1,r0,#1              ;90
00007a  b2c8              UXTB     r0,r1                 ;90
                  |L5.124|
00007c  2820              CMP      r0,#0x20              ;90
00007e  dbc4              BLT      |L5.10|
;;;100    	}
;;;101    }
000080  b020              ADD      sp,sp,#0x80
000082  4770              BX       lr
;;;102    
                          ENDP

                  |L5.132|
                          DCD      All_Data_Buffer
                  |L5.136|
                          DCD      stored_min_voltage
                  |L5.140|
                          DCD      stored_max_voltage
                  |L5.144|
                          DCD      result

                          AREA ||i.longest_continuous_subarray||, CODE, READONLY, ALIGN=2

                  longest_continuous_subarray PROC
;;;164     calculate the starting and ending indices of the subarray */
;;;165    void longest_continuous_subarray()
000000  b510              PUSH     {r4,lr}
;;;166    {
;;;167    	u8 start_index = 0;
000002  f04f0100          MOV      r1,#0
;;;168    	u8 end_index = 0;
000006  460a              MOV      r2,r1
;;;169    	u8 max_length = 0;
000008  460b              MOV      r3,r1
;;;170    	u8 index = 0;
00000a  4608              MOV      r0,r1
;;;171    	for(index = 0; index < 32; index++)
00000c  bf00              NOP      
00000e  e018              B        |L6.66|
                  |L6.16|
;;;172    	{
;;;173    		if(binary_result[index])
000010  4c0d              LDR      r4,|L6.72|
000012  5c24              LDRB     r4,[r4,r0]
000014  b10c              CBZ      r4,|L6.26|
;;;174    			end_index = index;
000016  4602              MOV      r2,r0
000018  e003              B        |L6.34|
                  |L6.26|
;;;175    		else
;;;176    		{
;;;177    			start_index = index + 1;
00001a  f1000401          ADD      r4,r0,#1
00001e  b2e1              UXTB     r1,r4
;;;178    			end_index = start_index;
000020  460a              MOV      r2,r1
                  |L6.34|
;;;179    		}			
;;;180    
;;;181    		if(max_length < end_index - start_index + 1)
000022  1a54              SUBS     r4,r2,r1
000024  1c64              ADDS     r4,r4,#1
000026  429c              CMP      r4,r3
000028  dd08              BLE      |L6.60|
;;;182    		{
;;;183    			max_length = end_index - start_index + 1;
00002a  eba20401          SUB      r4,r2,r1
00002e  f1040401          ADD      r4,r4,#1
000032  b2e3              UXTB     r3,r4
;;;184    			high_result_start = start_index;
000034  4c05              LDR      r4,|L6.76|
000036  7021              STRB     r1,[r4,#0]
;;;185    			high_result_end = end_index;
000038  4c05              LDR      r4,|L6.80|
00003a  7022              STRB     r2,[r4,#0]
                  |L6.60|
00003c  f1000401          ADD      r4,r0,#1              ;171
000040  b2e0              UXTB     r0,r4                 ;171
                  |L6.66|
000042  2820              CMP      r0,#0x20              ;171
000044  dbe4              BLT      |L6.16|
;;;186    		}	
;;;187    	}		
;;;188    }
000046  bd10              POP      {r4,pc}
;;;189    
                          ENDP

                  |L6.72|
                          DCD      binary_result
                  |L6.76|
                          DCD      high_result_start
                  |L6.80|
                          DCD      high_result_end

                          AREA ||i.threshold_calculation||, CODE, READONLY, ALIGN=2

                  threshold_calculation PROC
;;;103    /*caculate the threshold to decide whether the result indicates high voltage or low voltage*/
;;;104    void threshold_calculation()
000000  b5f0              PUSH     {r4-r7,lr}
;;;105    {
;;;106    	//assumption: expected threshold = 5000
;;;107    	u8 index = 0;
000002  f04f0000          MOV      r0,#0
;;;108    	u16 min_result = 10000;	//no result can be larger than 10000
000006  f2427110          MOV      r1,#0x2710
;;;109    	u16 max_result = 0; //no result can be less than 0
00000a  4603              MOV      r3,r0
;;;110    	u16 min_high_result = 10000; //the minimum result > 5000
00000c  460c              MOV      r4,r1
;;;111    	u8 possible_high_result_count = 0;
00000e  4602              MOV      r2,r0
;;;112      	
;;;113    	//find the min_result & max_result
;;;114    	for(index = 0; index < 32; index++)
000010  bf00              NOP      
000012  e02b              B        |L7.108|
                  |L7.20|
;;;115    	{
;;;116    		//update min_result
;;;117    		if(min_result > result[index])
000014  4d2c              LDR      r5,|L7.200|
000016  f8355010          LDRH     r5,[r5,r0,LSL #1]
00001a  428d              CMP      r5,r1
00001c  da02              BGE      |L7.36|
;;;118    		 	min_result = result[index];
00001e  4d2a              LDR      r5,|L7.200|
000020  f8351010          LDRH     r1,[r5,r0,LSL #1]
                  |L7.36|
;;;119    		//update max_result
;;;120    		if(max_result < result[index])
000024  4d28              LDR      r5,|L7.200|
000026  f8355010          LDRH     r5,[r5,r0,LSL #1]
00002a  429d              CMP      r5,r3
00002c  dd02              BLE      |L7.52|
;;;121    			max_result = result[index];
00002e  4d26              LDR      r5,|L7.200|
000030  f8353010          LDRH     r3,[r5,r0,LSL #1]
                  |L7.52|
;;;122    		//update min_high_result;
;;;123    		if(min_high_result > result[index] && result[index] > 5000)
000034  4d24              LDR      r5,|L7.200|
000036  f8355010          LDRH     r5,[r5,r0,LSL #1]
00003a  42a5              CMP      r5,r4
00003c  da09              BGE      |L7.82|
00003e  4d22              LDR      r5,|L7.200|
000040  f8355010          LDRH     r5,[r5,r0,LSL #1]
000044  f2413688          MOV      r6,#0x1388
000048  42b5              CMP      r5,r6
00004a  dd02              BLE      |L7.82|
;;;124    			min_high_result = result[index];
00004c  4d1e              LDR      r5,|L7.200|
00004e  f8354010          LDRH     r4,[r5,r0,LSL #1]
                  |L7.82|
;;;125    		if(result[index] > 5000)
000052  4d1d              LDR      r5,|L7.200|
000054  f8355010          LDRH     r5,[r5,r0,LSL #1]
000058  f2413688          MOV      r6,#0x1388
00005c  42b5              CMP      r5,r6
00005e  dd02              BLE      |L7.102|
;;;126    			possible_high_result_count++;
000060  f1020501          ADD      r5,r2,#1
000064  b2ea              UXTB     r2,r5
                  |L7.102|
000066  f1000501          ADD      r5,r0,#1              ;114
00006a  b2e8              UXTB     r0,r5                 ;114
                  |L7.108|
00006c  2820              CMP      r0,#0x20              ;114
00006e  dbd1              BLT      |L7.20|
;;;127    	}
;;;128    	if(possible_high_result_count == 0)	//no result > 5000
000070  b982              CBNZ     r2,|L7.148|
;;;129    	{
;;;130    		result_threshold = (max_result + min_result)/2; 
000072  eb030501          ADD      r5,r3,r1
000076  eb0576d5          ADD      r6,r5,r5,LSR #31
00007a  f3c6064f          UBFX     r6,r6,#1,#16
00007e  4f13              LDR      r7,|L7.204|
000080  803e              STRH     r6,[r7,#0]
;;;131    		on_line = 0;
000082  f04f0500          MOV      r5,#0
000086  4e12              LDR      r6,|L7.208|
000088  7035              STRB     r5,[r6,#0]
;;;132    		vague_flag = 1;	
00008a  f04f0501          MOV      r5,#1
00008e  4e11              LDR      r6,|L7.212|
000090  7035              STRB     r5,[r6,#0]
000092  e018              B        |L7.198|
                  |L7.148|
;;;133    		//PAY ATTENTION: since in this case, we cannot determine
;;;134    		//whether the sensor bar is high above the gound or
;;;135    		//there's no white line detected, we set this vague_flag
;;;136    		//and will make a prediction.(NOT ACCURATE)
;;;137    	}
;;;138    	else if(possible_high_result_count < 16)	//less than 16 results > 5000
000094  2a10              CMP      r2,#0x10
000096  da0e              BGE      |L7.182|
;;;139    	{
;;;140    	 	result_threshold = (min_high_result + min_result)/2;
000098  eb040501          ADD      r5,r4,r1
00009c  eb0576d5          ADD      r6,r5,r5,LSR #31
0000a0  f3c6064f          UBFX     r6,r6,#1,#16
0000a4  4f09              LDR      r7,|L7.204|
0000a6  803e              STRH     r6,[r7,#0]
;;;141    		on_line = 0;	//for sure
0000a8  f04f0500          MOV      r5,#0
0000ac  4e08              LDR      r6,|L7.208|
0000ae  7035              STRB     r5,[r6,#0]
;;;142    		vague_flag = 0;
0000b0  4e08              LDR      r6,|L7.212|
0000b2  7035              STRB     r5,[r6,#0]
0000b4  e007              B        |L7.198|
                  |L7.182|
;;;143    	}
;;;144    	else 	//over 16 results > 5000 OBVIOUSLY
;;;145    	{
;;;146    	 	on_line = 1;
0000b6  f04f0501          MOV      r5,#1
0000ba  4e05              LDR      r6,|L7.208|
0000bc  7035              STRB     r5,[r6,#0]
;;;147    		vague_flag = 0;
0000be  f04f0500          MOV      r5,#0
0000c2  4e04              LDR      r6,|L7.212|
0000c4  7035              STRB     r5,[r6,#0]
                  |L7.198|
;;;148    	}
;;;149    }
0000c6  bdf0              POP      {r4-r7,pc}
;;;150    
                          ENDP

                  |L7.200|
                          DCD      result
                  |L7.204|
                          DCD      result_threshold
                  |L7.208|
                          DCD      on_line
                  |L7.212|
                          DCD      vague_flag

                          AREA ||i.threshold_filter||, CODE, READONLY, ALIGN=2

                  threshold_filter PROC
;;;150    
;;;151    void threshold_filter()
000000  f04f0000          MOV      r0,#0
;;;152    {
;;;153    	u8 index = 0;
;;;154    	for(index = 0; index < 32; index++)
000004  bf00              NOP      
000006  e012              B        |L8.46|
                  |L8.8|
;;;155    	{
;;;156    		if(result[index] > result_threshold)
000008  490a              LDR      r1,|L8.52|
00000a  f8311010          LDRH     r1,[r1,r0,LSL #1]
00000e  4a0a              LDR      r2,|L8.56|
000010  8812              LDRH     r2,[r2,#0]  ; result_threshold
000012  4291              CMP      r1,r2
000014  dd04              BLE      |L8.32|
;;;157    			binary_result[index] = 1;
000016  f04f0101          MOV      r1,#1
00001a  4a08              LDR      r2,|L8.60|
00001c  5411              STRB     r1,[r2,r0]
00001e  e003              B        |L8.40|
                  |L8.32|
;;;158    		else
;;;159    			binary_result[index] = 0;
000020  f04f0100          MOV      r1,#0
000024  4a05              LDR      r2,|L8.60|
000026  5411              STRB     r1,[r2,r0]
                  |L8.40|
000028  f1000101          ADD      r1,r0,#1              ;154
00002c  b2c8              UXTB     r0,r1                 ;154
                  |L8.46|
00002e  2820              CMP      r0,#0x20              ;154
000030  dbea              BLT      |L8.8|
;;;160    	}
;;;161    }
000032  4770              BX       lr
;;;162    
                          ENDP

                  |L8.52|
                          DCD      result
                  |L8.56|
                          DCD      result_threshold
                  |L8.60|
                          DCD      binary_result

                          AREA ||i.update_all||, CODE, READONLY, ALIGN=2

                  update_all PROC
;;;189    
;;;190    void update_all()
000000  b500              PUSH     {lr}
;;;191    {
;;;192    	average_filter();
000002  f7fffffe          BL       average_filter
;;;193    	data_recombination(); 
000006  f7fffffe          BL       data_recombination
;;;194    	linearization();
00000a  f7fffffe          BL       linearization
;;;195    	threshold_calculation();
00000e  f7fffffe          BL       threshold_calculation
;;;196    	threshold_filter();
000012  f7fffffe          BL       threshold_filter
;;;197    	longest_continuous_subarray();
000016  f7fffffe          BL       longest_continuous_subarray
;;;198    	final_result = (high_result_start + high_result_end)/2;
00001a  4906              LDR      r1,|L9.52|
00001c  7809              LDRB     r1,[r1,#0]  ; high_result_start
00001e  4a06              LDR      r2,|L9.56|
000020  7812              LDRB     r2,[r2,#0]  ; high_result_end
000022  eb010002          ADD      r0,r1,r2
000026  eb0071d0          ADD      r1,r0,r0,LSR #31
00002a  f3c10147          UBFX     r1,r1,#1,#8
00002e  4a03              LDR      r2,|L9.60|
000030  7011              STRB     r1,[r2,#0]
;;;199    }
000032  bd00              POP      {pc}
;;;200    
                          ENDP

                  |L9.52|
                          DCD      high_result_start
                  |L9.56|
                          DCD      high_result_end
                  |L9.60|
                          DCD      final_result

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  Filtered_Data_Buffer
                          %        32
                  All_Data_Buffer
                          %        64
                  result
                          %        64
                  binary_result
                          %        32

                          AREA ||.data||, DATA, ALIGN=1

                  result_threshold
000000  0000              DCW      0x0000
                  on_line
000002  00                DCB      0x00
                  vague_flag
000003  00                DCB      0x00
                  high_result_start
000004  00                DCB      0x00
                  high_result_end
000005  00                DCB      0x00
                  final_result
000006  00                DCB      0x00
