; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\uart.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I"C:\Users\Kenneth Au\Desktop\toKenneth\Complicated Big Motor Control\(encoder)24V Big Blue Black Motor Control June 7\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=513 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\obj\uart.crf user\uart.c]
                          THUMB

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;148      */
;;;149    PUTCHAR_PROTOTYPE
000000  b570              PUSH     {r4-r6,lr}
;;;150    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;151    	if (printf_COMx == COM_NULL)
000006  480f              LDR      r0,|L1.68|
000008  f9900000          LDRSB    r0,[r0,#0]  ; printf_COMx
00000c  1c40              ADDS     r0,r0,#1
00000e  b908              CBNZ     r0,|L1.20|
;;;152    		return ch;
000010  4620              MOV      r0,r4
                  |L1.18|
;;;153    		
;;;154    	while (USART_GetFlagStatus(COM_USART[printf_COMx], USART_FLAG_TC) == RESET);
;;;155    	USART_SendData(COM_USART[printf_COMx], (uint8_t) ch);
;;;156    	return ch;
;;;157    }
000012  bd70              POP      {r4-r6,pc}
                  |L1.20|
000014  bf00              NOP                            ;154
                  |L1.22|
000016  490c              LDR      r1,|L1.72|
000018  4a0a              LDR      r2,|L1.68|
00001a  f9922000          LDRSB    r2,[r2,#0]            ;154  ; printf_COMx
00001e  f8510022          LDR      r0,[r1,r2,LSL #2]     ;154
000022  2140              MOVS     r1,#0x40              ;154
000024  f7fffffe          BL       USART_GetFlagStatus
000028  2800              CMP      r0,#0                 ;154
00002a  d0f4              BEQ      |L1.22|
00002c  b2e1              UXTB     r1,r4                 ;155
00002e  4a06              LDR      r2,|L1.72|
000030  4b04              LDR      r3,|L1.68|
000032  f9933000          LDRSB    r3,[r3,#0]            ;155  ; printf_COMx
000036  f8520023          LDR      r0,[r2,r3,LSL #2]     ;155
00003a  f7fffffe          BL       USART_SendData
00003e  4620              MOV      r0,r4                 ;156
000040  e7e7              B        |L1.18|
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      printf_COMx
                  |L1.72|
                          DCD      COM_USART

                          AREA ||i.uart_init||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;28       */
;;;29     void uart_init(COM_TypeDef COM, u32 br)
000000  b530              PUSH     {r4,r5,lr}
;;;30     {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;31     	GPIO_InitTypeDef GPIO_InitStructure;
;;;32     	USART_InitTypeDef USART_InitStructure;
;;;33     
;;;34     	RCC_APB2PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM] | RCC_APB2Periph_AFIO, ENABLE);
000008  4929              LDR      r1,|L2.176|
00000a  f8511024          LDR      r1,[r1,r4,LSL #2]
00000e  4a29              LDR      r2,|L2.180|
000010  f8522024          LDR      r2,[r2,r4,LSL #2]
000014  4311              ORRS     r1,r1,r2
000016  f0410001          ORR      r0,r1,#1
00001a  2101              MOVS     r1,#1
00001c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;35     
;;;36     	if (COM == COM1)
000020  b934              CBNZ     r4,|L2.48|
;;;37     	{
;;;38     		RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
000022  4925              LDR      r1,|L2.184|
000024  f8510024          LDR      r0,[r1,r4,LSL #2]
000028  2101              MOVS     r1,#1
00002a  f7fffffe          BL       RCC_APB2PeriphClockCmd
00002e  e005              B        |L2.60|
                  |L2.48|
;;;39     	}
;;;40     	else
;;;41     	{
;;;42     		RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
000030  4921              LDR      r1,|L2.184|
000032  f8510024          LDR      r0,[r1,r4,LSL #2]
000036  2101              MOVS     r1,#1
000038  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L2.60|
;;;43     	}
;;;44     
;;;45     	/* Configure USART Tx as alternate function push-pull */
;;;46     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00003c  2018              MOVS     r0,#0x18
00003e  f88d0013          STRB     r0,[sp,#0x13]
;;;47     	GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
000042  481e              LDR      r0,|L2.188|
000044  f8300014          LDRH     r0,[r0,r4,LSL #1]
000048  f8ad0010          STRH     r0,[sp,#0x10]
;;;48     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004c  2003              MOVS     r0,#3
00004e  f88d0012          STRB     r0,[sp,#0x12]
;;;49     	GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
000052  491b              LDR      r1,|L2.192|
000054  f8510024          LDR      r0,[r1,r4,LSL #2]
000058  a904              ADD      r1,sp,#0x10
00005a  f7fffffe          BL       GPIO_Init
;;;50     
;;;51     	/* Configure USART Rx as input floating */
;;;52     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00005e  2004              MOVS     r0,#4
000060  f88d0013          STRB     r0,[sp,#0x13]
;;;53     	GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
000064  4817              LDR      r0,|L2.196|
000066  f8300014          LDRH     r0,[r0,r4,LSL #1]
00006a  f8ad0010          STRH     r0,[sp,#0x10]
;;;54     	GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
00006e  4916              LDR      r1,|L2.200|
000070  f8510024          LDR      r0,[r1,r4,LSL #2]
000074  a904              ADD      r1,sp,#0x10
000076  f7fffffe          BL       GPIO_Init
;;;55     
;;;56     	/* USART configuration */
;;;57     	USART_InitStructure.USART_BaudRate = br;
00007a  9500              STR      r5,[sp,#0]
;;;58     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00007c  2000              MOVS     r0,#0
00007e  f8ad0004          STRH     r0,[sp,#4]
;;;59     	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000082  f8ad0006          STRH     r0,[sp,#6]
;;;60     	USART_InitStructure.USART_Parity = USART_Parity_No;
000086  f8ad0008          STRH     r0,[sp,#8]
;;;61     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00008a  f8ad000c          STRH     r0,[sp,#0xc]
;;;62     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00008e  200c              MOVS     r0,#0xc
000090  f8ad000a          STRH     r0,[sp,#0xa]
;;;63     
;;;64     	USART_Init(COM_USART[COM], &USART_InitStructure);
000094  490d              LDR      r1,|L2.204|
000096  f8510024          LDR      r0,[r1,r4,LSL #2]
00009a  4669              MOV      r1,sp
00009c  f7fffffe          BL       USART_Init
;;;65     	USART_Cmd(COM_USART[COM], ENABLE);
0000a0  490a              LDR      r1,|L2.204|
0000a2  f8510024          LDR      r0,[r1,r4,LSL #2]
0000a6  2101              MOVS     r1,#1
0000a8  f7fffffe          BL       USART_Cmd
;;;66     }
0000ac  b005              ADD      sp,sp,#0x14
0000ae  bd30              POP      {r4,r5,pc}
;;;67     
                          ENDP

                  |L2.176|
                          DCD      COM_TX_PORT_CLK
                  |L2.180|
                          DCD      COM_RX_PORT_CLK
                  |L2.184|
                          DCD      COM_USART_CLK
                  |L2.188|
                          DCD      COM_TX_PIN
                  |L2.192|
                          DCD      COM_TX_PORT
                  |L2.196|
                          DCD      COM_RX_PIN
                  |L2.200|
                          DCD      COM_RX_PORT
                  |L2.204|
                          DCD      COM_USART

                          AREA ||i.uart_interrupt||, CODE, READONLY, ALIGN=2

                  uart_interrupt PROC
;;;72       */
;;;73     void uart_interrupt(COM_TypeDef COM)
000000  b538              PUSH     {r3-r5,lr}
;;;74     {
000002  4604              MOV      r4,r0
;;;75     	NVIC_InitTypeDef NVIC_InitStructure;
;;;76     
;;;77     	#ifdef VECT_TAB_RAM
;;;78     	NVIC_SetVectorTable(NVIC_VectTab_RAM,0x0);
;;;79     	#else
;;;80     	NVIC_SetVectorTable(NVIC_VectTab_FLASH,0x0);
000004  2100              MOVS     r1,#0
000006  f04f6000          MOV      r0,#0x8000000
00000a  f7fffffe          BL       NVIC_SetVectorTable
;;;81     	#endif
;;;82     
;;;83     	NVIC_InitStructure.NVIC_IRQChannel = COM_IRQ[COM];
00000e  480c              LDR      r0,|L3.64|
000010  f8100014          LDRB     r0,[r0,r4,LSL #1]
000014  f88d0000          STRB     r0,[sp,#0]
;;;84     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000018  2001              MOVS     r0,#1
00001a  f88d0001          STRB     r0,[sp,#1]
;;;85     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
00001e  f88d0002          STRB     r0,[sp,#2]
;;;86     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000022  f88d0003          STRB     r0,[sp,#3]
;;;87     	NVIC_Init(&NVIC_InitStructure);
000026  4668              MOV      r0,sp
000028  f7fffffe          BL       NVIC_Init
;;;88     	/* Enables the USART receive interrupt */
;;;89     	USART_ITConfig(COM_USART[COM],USART_IT_RXNE,ENABLE);
00002c  4905              LDR      r1,|L3.68|
00002e  f8510024          LDR      r0,[r1,r4,LSL #2]
000032  2201              MOVS     r2,#1
000034  f2405125          MOV      r1,#0x525
000038  f7fffffe          BL       USART_ITConfig
;;;90     }
00003c  bd38              POP      {r3-r5,pc}
;;;91     
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      COM_IRQ
                  |L3.68|
                          DCD      COM_USART

                          AREA ||i.uart_printf_disable||, CODE, READONLY, ALIGN=2

                  uart_printf_disable PROC
;;;106      */
;;;107    void uart_printf_disable(void)
000000  20ff              MOVS     r0,#0xff
;;;108    {
;;;109    	printf_COMx = COM_NULL;
000002  4901              LDR      r1,|L4.8|
000004  7008              STRB     r0,[r1,#0]
;;;110    }
000006  4770              BX       lr
;;;111    
                          ENDP

                  |L4.8|
                          DCD      printf_COMx

                          AREA ||i.uart_printf_enable||, CODE, READONLY, ALIGN=2

                  uart_printf_enable PROC
;;;96       */
;;;97     void uart_printf_enable(COM_TypeDef COM)
000000  4901              LDR      r1,|L5.8|
;;;98     {
;;;99     	printf_COMx = COM;
000002  7008              STRB     r0,[r1,#0]
;;;100    }
000004  4770              BX       lr
;;;101    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      printf_COMx

                          AREA ||i.uart_tx||, CODE, READONLY, ALIGN=1

                  uart_tx PROC
;;;129      */
;;;130    void uart_tx(COM_TypeDef COM, uc8 * tx_buf, ...)
000000  b40f              PUSH     {r0-r3}
;;;131    {
000002  b530              PUSH     {r4,r5,lr}
000004  b08b              SUB      sp,sp,#0x2c
000006  4605              MOV      r5,r0
;;;132    	va_list arglist;
;;;133    	u8 buf[40], *fp;
;;;134    	
;;;135    	va_start(arglist, tx_buf);
000008  a810              ADD      r0,sp,#0x40
00000a  900a              STR      r0,[sp,#0x28]
;;;136    	vsprintf((char*)buf, (const char*)tx_buf, arglist);
00000c  4668              MOV      r0,sp
00000e  9a0a              LDR      r2,[sp,#0x28]
000010  990f              LDR      r1,[sp,#0x3c]
000012  f7fffffe          BL       __c89vsprintf
;;;137    	va_end(arglist);
000016  2000              MOVS     r0,#0
000018  900a              STR      r0,[sp,#0x28]
;;;138    	
;;;139    	fp = buf;
00001a  466c              MOV      r4,sp
;;;140    	while (*fp)
00001c  e004              B        |L6.40|
                  |L6.30|
;;;141    		uart_tx_byte(COM,*fp++);
00001e  f8141b01          LDRB     r1,[r4],#1
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       uart_tx_byte
                  |L6.40|
000028  7820              LDRB     r0,[r4,#0]            ;140
00002a  2800              CMP      r0,#0                 ;140
00002c  d1f7              BNE      |L6.30|
;;;142    }
00002e  b00b              ADD      sp,sp,#0x2c
000030  bc30              POP      {r4,r5}
000032  f85dfb14          LDR      pc,[sp],#0x14
;;;143    
                          ENDP


                          AREA ||i.uart_tx_byte||, CODE, READONLY, ALIGN=2

                  uart_tx_byte PROC
;;;117      */
;;;118    void uart_tx_byte(COM_TypeDef COM, uc8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;120    	while (USART_GetFlagStatus(COM_USART[COM], USART_FLAG_TC) == RESET); 
000006  bf00              NOP      
                  |L7.8|
000008  4907              LDR      r1,|L7.40|
00000a  f8510024          LDR      r0,[r1,r4,LSL #2]
00000e  2140              MOVS     r1,#0x40
000010  f7fffffe          BL       USART_GetFlagStatus
000014  2800              CMP      r0,#0
000016  d0f7              BEQ      |L7.8|
;;;121    	USART_SendData(COM_USART[COM],data);
000018  4903              LDR      r1,|L7.40|
00001a  f8510024          LDR      r0,[r1,r4,LSL #2]
00001e  4629              MOV      r1,r5
000020  f7fffffe          BL       USART_SendData
;;;122    }
000024  bd70              POP      {r4-r6,pc}
;;;123    
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
                          DCD      COM_USART

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  COM_USART_CLK
                          DCD      0x00004000
                          DCD      0x00020000
                          DCD      0x00040000
                          %        8
                  COM_TX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000008
                          %        8
                  COM_RX_PORT_CLK
                          DCD      0x00000004
                          DCD      0x00000004
                          DCD      0x00000008
                          %        8
                  COM_TX_PIN
00003c  02000004          DCW      0x0200,0x0004
000040  0400              DCW      0x0400
000042  0000              DCB      0x00,0x00
000044  0000              DCB      0x00,0x00
                  COM_RX_PIN
000046  0400              DCW      0x0400
000048  00080800          DCW      0x0008,0x0800
                          DCD      0x00000000
                  COM_IRQ
000050  00250026          DCW      0x0025,0x0026
000054  0027              DCW      0x0027
000056  0000              DCB      0x00,0x00
000058  0000              DCB      0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  COM_USART
                          DCD      0x40013800
                          DCD      0x40004400
                          DCD      0x40004800
                          %        8
                  COM_TX_PORT
                          DCD      0x40010800
                          DCD      0x40010800
                          DCD      0x40010c00
                          %        8
                  COM_RX_PORT
                          DCD      0x40010800
                          DCD      0x40010800
                          DCD      0x40010c00
                          %        8
                  printf_COMx
00003c  00                DCB      0x00
