; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I"C:\Users\Kenneth Au\Desktop\toKenneth\Complicated Big Motor Control\(encoder)24V Big Blue Black Motor Control June 7\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=513 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\obj\main.crf user\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;69     
;;;70     int main(void)
000000  f2413088          MOV      r0,#0x1388
;;;71     {
;;;72     	system_init(5000);
000004  f7fffffe          BL       system_init
;;;73     	system_para_init();
000008  f7fffffe          BL       system_para_init
;;;74     	system_pwm_enable();
00000c  f7fffffe          BL       system_pwm_enable
;;;75     	init_memory();
000010  f7fffffe          BL       init_memory
;;;76     	ticks_init();
000014  f7fffffe          BL       ticks_init
;;;77     	CAN_Configuration();
000018  f7fffffe          BL       CAN_Configuration
;;;78       
;;;79     	while ((ADC_ConvertedValue[0]<1400 || ADC_ConvertedValue[0]>1700)
00001c  e022              B        |L1.100|
                  |L1.30|
;;;80     	     ||(ADC_ConvertedValue[1]<1400 || ADC_ConvertedValue[1]>1700)){
;;;81     				 GPIO_WriteBit(GPIOC,GPIO_Pin_1,1);
00001e  2201              MOVS     r2,#1
000020  2102              MOVS     r1,#2
000022  484a              LDR      r0,|L1.332|
000024  f7fffffe          BL       GPIO_WriteBit
;;;82     				 GPIO_WriteBit(GPIOC,GPIO_Pin_0,1);
000028  2201              MOVS     r2,#1
00002a  4611              MOV      r1,r2
00002c  4847              LDR      r0,|L1.332|
00002e  f7fffffe          BL       GPIO_WriteBit
;;;83     				 
;;;84     				 if (ticks_img != get_ticks()) 
000032  f7fffffe          BL       get_ticks
000036  4946              LDR      r1,|L1.336|
000038  8809              LDRH     r1,[r1,#0]  ; ticks_img
00003a  4288              CMP      r0,r1
00003c  d012              BEQ      |L1.100|
;;;85     		{
;;;86     			ticks_img = get_ticks();
00003e  f7fffffe          BL       get_ticks
000042  4943              LDR      r1,|L1.336|
000044  8008              STRH     r0,[r1,#0]
;;;87     		
;;;88     			if(ticks_img % 5 == 0)
000046  4608              MOV      r0,r1
000048  8800              LDRH     r0,[r0,#0]  ; ticks_img
00004a  2105              MOVS     r1,#5
00004c  fb90f2f1          SDIV     r2,r0,r1
000050  fb010012          MLS      r0,r1,r2,r0
000054  b930              CBNZ     r0,|L1.100|
;;;89     				Send_Encoder((s32)(d_cal));
000056  483f              LDR      r0,|L1.340|
000058  6800              LDR      r0,[r0,#0]  ; d_cal
00005a  f7fffffe          BL       __aeabi_f2iz
00005e  4604              MOV      r4,r0
000060  f7fffffe          BL       Send_Encoder
                  |L1.100|
000064  483c              LDR      r0,|L1.344|
000066  8800              LDRH     r0,[r0,#0]            ;79  ; ADC_ConvertedValue
000068  f5b06faf          CMP      r0,#0x578             ;79
00006c  dbd7              BLT      |L1.30|
00006e  483a              LDR      r0,|L1.344|
000070  8800              LDRH     r0,[r0,#0]            ;79  ; ADC_ConvertedValue
000072  f24061a4          MOV      r1,#0x6a4             ;79
000076  4288              CMP      r0,r1                 ;79
000078  dcd1              BGT      |L1.30|
00007a  4837              LDR      r0,|L1.344|
00007c  8840              LDRH     r0,[r0,#2]            ;80  ; ADC_ConvertedValue
00007e  f5b06faf          CMP      r0,#0x578             ;80
000082  dbcc              BLT      |L1.30|
000084  4834              LDR      r0,|L1.344|
000086  8840              LDRH     r0,[r0,#2]            ;80  ; ADC_ConvertedValue
000088  4288              CMP      r0,r1                 ;80
00008a  dcc8              BGT      |L1.30|
;;;90     			 }
;;;91     		 }
;;;92     
;;;93     	for(delay_i = 0; delay_i < 1000; delay_i++);
00008c  2000              MOVS     r0,#0
00008e  4933              LDR      r1,|L1.348|
000090  6008              STR      r0,[r1,#0]  ; delay_i
000092  e004              B        |L1.158|
                  |L1.148|
000094  4831              LDR      r0,|L1.348|
000096  6800              LDR      r0,[r0,#0]  ; delay_i
000098  1c40              ADDS     r0,r0,#1
00009a  4930              LDR      r1,|L1.348|
00009c  6008              STR      r0,[r1,#0]  ; delay_i
                  |L1.158|
00009e  482f              LDR      r0,|L1.348|
0000a0  6800              LDR      r0,[r0,#0]  ; delay_i
0000a2  f5b07f7a          CMP      r0,#0x3e8
0000a6  d3f5              BCC      |L1.148|
;;;94     
;;;95     	cali_user();
0000a8  f7fffffe          BL       cali_user
;;;96     
;;;97     
;;;98     
;;;99     	while (!cali_done)
0000ac  e013              B        |L1.214|
                  |L1.174|
;;;100    	{
;;;101    		if (ticks_img != get_ticks()) 
0000ae  f7fffffe          BL       get_ticks
0000b2  4927              LDR      r1,|L1.336|
0000b4  8809              LDRH     r1,[r1,#0]  ; ticks_img
0000b6  4288              CMP      r0,r1
0000b8  d00d              BEQ      |L1.214|
;;;102    		{
;;;103    			ticks_img = get_ticks();
0000ba  f7fffffe          BL       get_ticks
0000be  4924              LDR      r1,|L1.336|
0000c0  8008              STRH     r0,[r1,#0]
;;;104    		
;;;105    			if(ticks_img % 5 == 0)
0000c2  4608              MOV      r0,r1
0000c4  8800              LDRH     r0,[r0,#0]  ; ticks_img
0000c6  2105              MOVS     r1,#5
0000c8  fb90f2f1          SDIV     r2,r0,r1
0000cc  fb010012          MLS      r0,r1,r2,r0
0000d0  b908              CBNZ     r0,|L1.214|
;;;106    			{
;;;107    			//	debugger_msg();	
;;;108    				Device1_TX();
0000d2  f7fffffe          BL       Device1_TX
                  |L1.214|
0000d6  4822              LDR      r0,|L1.352|
0000d8  7800              LDRB     r0,[r0,#0]            ;99  ; cali_done
0000da  2800              CMP      r0,#0                 ;99
0000dc  d0e7              BEQ      |L1.174|
;;;109    			}
;;;110    		}
;;;111    	}
;;;112    
;;;113       
;;;114    				 GPIO_WriteBit(GPIOC,GPIO_Pin_1,0);
0000de  2200              MOVS     r2,#0
0000e0  2102              MOVS     r1,#2
0000e2  481a              LDR      r0,|L1.332|
0000e4  f7fffffe          BL       GPIO_WriteBit
;;;115    				 GPIO_WriteBit(GPIOC,GPIO_Pin_0,0);
0000e8  2200              MOVS     r2,#0
0000ea  2101              MOVS     r1,#1
0000ec  4817              LDR      r0,|L1.332|
0000ee  f7fffffe          BL       GPIO_WriteBit
;;;116    	
;;;117    	motor_zero();
0000f2  f7fffffe          BL       motor_zero
;;;118    	for(index = 0; index < 10; index++)	
0000f6  2000              MOVS     r0,#0
0000f8  491a              LDR      r1,|L1.356|
0000fa  7008              STRB     r0,[r1,#0]
0000fc  e006              B        |L1.268|
                  |L1.254|
;;;119    		Calibration_Done();
0000fe  f7fffffe          BL       Calibration_Done
000102  4818              LDR      r0,|L1.356|
000104  7800              LDRB     r0,[r0,#0]            ;118  ; index
000106  1c40              ADDS     r0,r0,#1              ;118
000108  4916              LDR      r1,|L1.356|
00010a  7008              STRB     r0,[r1,#0]            ;118
                  |L1.268|
00010c  4815              LDR      r0,|L1.356|
00010e  7800              LDRB     r0,[r0,#0]            ;118  ; index
000110  280a              CMP      r0,#0xa               ;118
000112  dbf4              BLT      |L1.254|
;;;120    //	motor_set_position(280000,300);
;;;121    	
;;;122    	while(1)
000114  e018              B        |L1.328|
                  |L1.278|
;;;123    	{
;;;124    	  
;;;125    		if (ticks_img != get_ticks()) 
000116  f7fffffe          BL       get_ticks
00011a  490d              LDR      r1,|L1.336|
00011c  8809              LDRH     r1,[r1,#0]  ; ticks_img
00011e  4288              CMP      r0,r1
000120  d012              BEQ      |L1.328|
;;;126    		{
;;;127    			ticks_img = get_ticks();
000122  f7fffffe          BL       get_ticks
000126  490a              LDR      r1,|L1.336|
000128  8008              STRH     r0,[r1,#0]
;;;128    		
;;;129    			if(ticks_img % 5 == 0)
00012a  4608              MOV      r0,r1
00012c  8800              LDRH     r0,[r0,#0]  ; ticks_img
00012e  2105              MOVS     r1,#5
000130  fb90f2f1          SDIV     r2,r0,r1
000134  fb010012          MLS      r0,r1,r2,r0
000138  b930              CBNZ     r0,|L1.328|
;;;130    			{
;;;131    //				debugger_msg();	
;;;132    //	            Motor_Return_Encoder(d_count);
;;;133    //				debug_data1((s32) count_dest);
;;;134    //                debug_data2((s32) count_total);
;;;135    //                debug_data3((s32) d_cal);
;;;136    //                debug_data4((s32) enable_bar);
;;;137     
;;;138    //				if (reach_token)
;;;139    //					motor_set_position(280000,300);	
;;;140    				Send_Encoder((s32)(d_cal));
00013a  4806              LDR      r0,|L1.340|
00013c  6800              LDR      r0,[r0,#0]  ; d_cal
00013e  f7fffffe          BL       __aeabi_f2iz
000142  4604              MOV      r4,r0
000144  f7fffffe          BL       Send_Encoder
                  |L1.328|
000148  e7e5              B        |L1.278|
;;;141    			}
;;;142    		}
;;;143    
;;;144    /*	 	
;;;145    	
;;;146    		if (cmd_flag)
;;;147    		{
;;;148    			//GUI shake command. Compatible with edroid debugger and mcs debugger
;;;149    			if (cmd == shake_cmd)
;;;150    			{
;;;151    			//	mode = CALIBRATION;
;;;152    				cali_user();
;;;153    				system_shake_hand(shake_cmd);
;;;154    			}
;;;155    			else if (cmd == shake2_cmd && data_cnt == 0)
;;;156    			{
;;;157    				system_shake_hand(shake2_cmd);	
;;;158    			}
;;;159    			//----------------------------------------------------------------------//
;;;160    			if(debug_mode == REAL)
;;;161    			{
;;;162    				//admin
;;;163    				if(cmd == enable_cmd) start = 1;
;;;164    				else if(cmd == disable_cmd) start = 0;
;;;165    
;;;166    				//parameters setting in velocity mode
;;;167    				else if(cmd == vel_init_cmd && data_cnt == 4 )
;;;168    				{
;;;169    				 	u8 tmp_pwm[4];
;;;170    					
;;;171    					tmp_pwm[0] = rx_buffer[0];
;;;172    					tmp_pwm[1] = rx_buffer[1];
;;;173    					tmp_pwm[2] = rx_buffer[2];
;;;174    					tmp_pwm[3] = rx_buffer[3];
;;;175    					
;;;176    					pwm_init = *((float*)tmp_pwm);
;;;177    				}
;;;178    				else if(cmd == vel_pid1_cmd && data_cnt == 12)
;;;179    				{
;;;180    				 	u8 tmp_kp[4];
;;;181    					u8 tmp_ki[4];
;;;182    					u8 tmp_kd[4];
;;;183    
;;;184    					tmp_kp[0] = rx_buffer[0];
;;;185    					tmp_kp[1] = rx_buffer[1];
;;;186    					tmp_kp[2] = rx_buffer[2];
;;;187    					tmp_kp[3] = rx_buffer[3];
;;;188    	
;;;189    					tmp_ki[0] = rx_buffer[4];
;;;190    					tmp_ki[1] = rx_buffer[5];
;;;191    					tmp_ki[2] = rx_buffer[6];
;;;192    					tmp_ki[3] = rx_buffer[7];
;;;193    	
;;;194    					tmp_kd[0] = rx_buffer[8];
;;;195    					tmp_kd[1] = rx_buffer[9];
;;;196    					tmp_kd[2] = rx_buffer[10];
;;;197    					tmp_kd[3] = rx_buffer[11];
;;;198    					
;;;199    					kp1 = *((float*)tmp_kp);
;;;200    					ki1 = *((float*)tmp_ki);
;;;201    					kd1 = *((float*)tmp_kd);
;;;202    				}
;;;203    				else if(cmd == vel_pid2_cmd && data_cnt == 12)
;;;204    				{
;;;205    				 	u8 tmp_kp[4];
;;;206    					u8 tmp_ki[4];
;;;207    					u8 tmp_kd[4];
;;;208    
;;;209    					tmp_kp[0] = rx_buffer[0];
;;;210    					tmp_kp[1] = rx_buffer[1];
;;;211    					tmp_kp[2] = rx_buffer[2];
;;;212    					tmp_kp[3] = rx_buffer[3];
;;;213    	
;;;214    					tmp_ki[0] = rx_buffer[4];
;;;215    					tmp_ki[1] = rx_buffer[5];
;;;216    					tmp_ki[2] = rx_buffer[6];
;;;217    					tmp_ki[3] = rx_buffer[7];
;;;218    	
;;;219    					tmp_kd[0] = rx_buffer[8];
;;;220    					tmp_kd[1] = rx_buffer[9];
;;;221    					tmp_kd[2] = rx_buffer[10];
;;;222    					tmp_kd[3] = rx_buffer[11];
;;;223    				
;;;224    					kp2 = *((float*)tmp_kp);
;;;225    					ki2 = *((float*)tmp_ki);
;;;226    					kd2 = *((float*)tmp_kd);
;;;227    				}
;;;228    				else if(cmd == vel_max_cmd && data_cnt == 4)
;;;229    				{
;;;230    				 	u8 tmp_max[4];
;;;231    
;;;232    					tmp_max[0] = rx_buffer[0];
;;;233    					tmp_max[1] = rx_buffer[1];
;;;234    					tmp_max[2] = rx_buffer[2];
;;;235    					tmp_max[3] = rx_buffer[3];
;;;236    					
;;;237    					max_pwm = *((float*)tmp_max);
;;;238    				}
;;;239    
;;;240    				//action in velocity mode
;;;241    				else if(cmd == vel_move_cmd && data_cnt == 4)
;;;242    				{
;;;243    				 	u8 tmp_move[4];
;;;244    
;;;245    					tmp_move[0] = rx_buffer[0];
;;;246    					tmp_move[1] = rx_buffer[1];
;;;247    					tmp_move[2] = rx_buffer[2];
;;;248    					tmp_move[3] = rx_buffer[3];
;;;249    			
;;;250    					r_count = *((float*)tmp_move); 
;;;251    					mode = VEL_MOVE;
;;;252    				}
;;;253    				else if(cmd == vel_stop_cmd )
;;;254    				{
;;;255    					mode = VEL_STOP;
;;;256    				}
;;;257    				else if(cmd == vel_zero_cmd && data_cnt == 0)
;;;258    				{
;;;259    				 	mode = VEL_ZERO;
;;;260    				}	   
;;;261    
;;;262    				//parameters setting in position mode
;;;263    				else if(cmd == pos_pid_cmd && data_cnt == 12)
;;;264    				{
;;;265    				 	u8 tmp_kp[4];
;;;266    					u8 tmp_ki[4];
;;;267    					u8 tmp_kd[4];
;;;268    
;;;269    					tmp_kp[0] = rx_buffer[0];
;;;270    					tmp_kp[1] = rx_buffer[1];
;;;271    					tmp_kp[2] = rx_buffer[2];
;;;272    					tmp_kp[3] = rx_buffer[3];
;;;273    	
;;;274    					tmp_ki[0] = rx_buffer[4];
;;;275    					tmp_ki[1] = rx_buffer[5];
;;;276    					tmp_ki[2] = rx_buffer[6];
;;;277    					tmp_ki[3] = rx_buffer[7];
;;;278    	
;;;279    					tmp_kd[0] = rx_buffer[8];
;;;280    					tmp_kd[1] = rx_buffer[9];
;;;281    					tmp_kd[2] = rx_buffer[10];
;;;282    					tmp_kd[3] = rx_buffer[11];
;;;283    				
;;;284    					ip = *((float*)tmp_kp);
;;;285    					ii = *((float*)tmp_ki);
;;;286    					id = *((float*)tmp_kd);	  
;;;287    				}
;;;288    				else if(cmd == pos_max_cmd && data_cnt == 8)  //max_acc followed by max_vel
;;;289    				{
;;;290    				 	u8 tmp_acc[4];
;;;291    
;;;292    					tmp_acc[0] = rx_buffer[0];
;;;293    					tmp_acc[1] = rx_buffer[1];
;;;294    					tmp_acc[2] = rx_buffer[2];
;;;295    					tmp_acc[3] = rx_buffer[3];
;;;296    					
;;;297    					max_acc = *((float*)tmp_acc);
;;;298    	
;;;299    				}
;;;300    				
;;;301    				//action in position mode
;;;302    				else if(cmd == pos_move_cmd && data_cnt == 4)//need to set home first
;;;303    				{
;;;304    			 
;;;305    				 	u8 tmp_move[4];
;;;306    
;;;307    					tmp_move[0] = rx_buffer[0];
;;;308    					tmp_move[1] = rx_buffer[1];
;;;309    					tmp_move[2] = rx_buffer[2];
;;;310    					tmp_move[3] = rx_buffer[3];
;;;311    					
;;;312    					count_dest = *((float*)tmp_move); //need unit conversion!!!!!!!!!
;;;313    					mode = POS_MOVE;
;;;314    				   
;;;315    					motor_set_position(count_dest,300);
;;;316    				}
;;;317    				else if(cmd == pos_lock_cmd && data_cnt == 0)//need to set home first
;;;318    				{
;;;319    					mode = POS_LOCK;
;;;320    				}
;;;321    				else if(cmd == pos_home_cmd && data_cnt == 0)
;;;322    				{
;;;323    					pos_set_home();
;;;324    				}
;;;325    
;;;326    
;;;327    				
;;;328    				//send back data
;;;329    				else if(cmd == get_vel_actual_cmd)
;;;330    				{
;;;331    					send_float(get_vel_actual_cmd, &d_count);
;;;332    				}
;;;333    				else if(cmd == get_vel_desire_cmd)
;;;334    				{
;;;335    					send_float(get_vel_desire_cmd, &r_count);
;;;336    				}
;;;337    				else if(cmd == get_pos_actual_cmd)
;;;338    				{
;;;339    					send_float(get_pos_actual_cmd, &count_total);
;;;340    				}
;;;341    				else if(cmd == get_pos_desire_cmd)
;;;342    				{
;;;343    					send_float(get_pos_desire_cmd, &count_dest);
;;;344    				}
;;;345    				else if(cmd == get_vel_pid1_cmd)
;;;346    				{
;;;347                        send_3_floats(get_vel_pid1_cmd, &kp1, &ki1, &kd1);
;;;348    				}
;;;349    				else if(cmd == get_vel_pid2_cmd)
;;;350    				{
;;;351    					send_3_floats(get_vel_pid2_cmd, &kp2, &ki2, &kd2);
;;;352    				}
;;;353    				else if(cmd == get_pos_pid_cmd)
;;;354    				{
;;;355    					send_3_floats(get_pos_pid_cmd, &ip, &ii, &id);
;;;356    				}
;;;357    				else if(cmd == get_max_vel_cmd)
;;;358    				{
;;;359    					send_float(get_max_vel_cmd, &histogram[3]);
;;;360    				}
;;;361    				else if(cmd == get_max_acc_cmd)
;;;362    				{
;;;363    					send_float(get_max_acc_cmd, &histogram[4]);
;;;364    				}
;;;365    			
;;;366    				else if(cmd == get_vel_init_cmd)
;;;367    				{
;;;368    					send_float(get_vel_init_cmd, &histogram[5]);
;;;369    				}
;;;370    				else if(cmd == get_mode_cmd)
;;;371    				{
;;;372    					conv_mode = enable_bar;
;;;373    					send_float(get_mode_cmd, &ADC_offset[0]);
;;;374    				}
;;;375    				else if(cmd == get_enable_cmd)
;;;376    				{
;;;377    					if(start == 1) conv_start = 1;
;;;378    					else 		   conv_start = 0;
;;;379    					send_float(get_enable_cmd, &ADC_offset[1]);
;;;380    				} 
;;;381    			}	   
;;;382    
;;;383    			
;;;384    			cmd_flag = 0;
;;;385    		} 
;;;386    	  	  */
;;;387    	}	  
;;;388    }
;;;389    
                          ENDP

00014a  0000              DCW      0x0000
                  |L1.332|
                          DCD      0x40011000
                  |L1.336|
                          DCD      ticks_img
                  |L1.340|
                          DCD      d_cal
                  |L1.344|
                          DCD      ADC_ConvertedValue
                  |L1.348|
                          DCD      delay_i
                  |L1.352|
                          DCD      cali_done
                  |L1.356|
                          DCD      index

                          AREA ||.data||, DATA, ALIGN=2

                  conv_start
                          DCD      0x00000000
                  conv_mode
                          DCD      0x00000000
                  debug_mode
000008  02                DCB      0x02
                  test
000009  000000            DCB      0x00,0x00,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  delay_i
                          DCD      0x00000000
                  ticks_img
000014  0000              DCW      0x0000
                  index
000016  0000              DCB      0x00,0x00
                  integrated_dcount
000018  00000000          DCFS     0x00000000 ; 0

                  __ARM_use_no_argv EQU 0
