; generated by ARM C/C++ Compiler, 4.1 [Build 713]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\calibration.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\calibration.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -IE:\UST\Robocon2012\KEIL\ARM\CMSIS\Include -IE:\UST\Robocon2012\KEIL\ARM\INC\ST\STM32F10x -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\calibration.crf user\calibration.c]
                          THUMB

                          AREA ||i.data_size_initialize||, CODE, READONLY, ALIGN=2

                  data_size_initialize PROC
;;;19     
;;;20     void data_size_initialize()
000000  b510              PUSH     {r4,lr}
;;;21     {
;;;22     	FLASH_Unlock();
000002  f7fffffe          BL       FLASH_Unlock
;;;23         FLASH_ClearFlag(FLASH_FLAG_EOP|FLASH_FLAG_PGERR|FLASH_FLAG_WRPRTERR);
000006  2034              MOVS     r0,#0x34
000008  f7fffffe          BL       FLASH_ClearFlag
;;;24     	FLASH_ErasePage(0x8002000);
00000c  4804              LDR      r0,|L1.32|
00000e  f7fffffe          BL       FLASH_ErasePage
;;;25     	FLASH_ProgramHalfWord((0x8002000),1); 
000012  2101              MOVS     r1,#1
000014  4802              LDR      r0,|L1.32|
000016  f7fffffe          BL       FLASH_ProgramHalfWord
;;;26     	FLASH_Lock();
00001a  f7fffffe          BL       FLASH_Lock
;;;27     }
00001e  bd10              POP      {r4,pc}
;;;28     
                          ENDP

                  |L1.32|
                          DCD      0x08002000

                          AREA ||i.flash_write_array||, CODE, READONLY, ALIGN=2

                  flash_write_array PROC
;;;39     
;;;40     void flash_write_array(uint16_t* data, uint16_t data_length)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;42     	uint16_t count = 0;
000006  f04f0400          MOV      r4,#0
;;;43     	FLASH_Unlock();
00000a  f7fffffe          BL       FLASH_Unlock
;;;44         FLASH_ClearFlag(FLASH_FLAG_EOP|FLASH_FLAG_PGERR|FLASH_FLAG_WRPRTERR);
00000e  2034              MOVS     r0,#0x34
000010  f7fffffe          BL       FLASH_ClearFlag
;;;45     	FLASH_ErasePage(0x8002000);
000014  4809              LDR      r0,|L2.60|
000016  f7fffffe          BL       FLASH_ErasePage
;;;46     	while(count < data_length)
00001a  e009              B        |L2.48|
                  |L2.28|
;;;47     	{
;;;48     		FLASH_ProgramHalfWord((0x8002000 + count*2),data[count]); 
00001c  f8351014          LDRH     r1,[r5,r4,LSL #1]
000020  4a06              LDR      r2,|L2.60|
000022  eb020044          ADD      r0,r2,r4,LSL #1
000026  f7fffffe          BL       FLASH_ProgramHalfWord
;;;49     		count++;
00002a  f1040001          ADD      r0,r4,#1
00002e  b284              UXTH     r4,r0
                  |L2.48|
000030  42b4              CMP      r4,r6                 ;46
000032  dbf3              BLT      |L2.28|
;;;50     	}
;;;51     	//lock flash
;;;52     	FLASH_Lock();
000034  f7fffffe          BL       FLASH_Lock
;;;53     }
000038  bd70              POP      {r4-r6,pc}
;;;54     
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      0x08002000

                          AREA ||i.flash_write_halfword||, CODE, READONLY, ALIGN=2

                  flash_write_halfword PROC
;;;29     
;;;30     void flash_write_halfword(uint16_t data)
000000  b510              PUSH     {r4,lr}
;;;31     {
000002  4604              MOV      r4,r0
;;;32     	FLASH_Unlock();
000004  f7fffffe          BL       FLASH_Unlock
;;;33         FLASH_ClearFlag(FLASH_FLAG_EOP|FLASH_FLAG_PGERR|FLASH_FLAG_WRPRTERR);
000008  2034              MOVS     r0,#0x34
00000a  f7fffffe          BL       FLASH_ClearFlag
;;;34     	FLASH_ErasePage(0x8002000);
00000e  4805              LDR      r0,|L3.36|
000010  f7fffffe          BL       FLASH_ErasePage
;;;35     	FLASH_ProgramHalfWord((0x8002000),data); 
000014  4621              MOV      r1,r4
000016  4803              LDR      r0,|L3.36|
000018  f7fffffe          BL       FLASH_ProgramHalfWord
;;;36     	FLASH_Lock();
00001c  f7fffffe          BL       FLASH_Lock
;;;37     }
000020  bd10              POP      {r4,pc}
;;;38     
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      0x08002000

                          AREA ||i.max_voltage_calibration||, CODE, READONLY, ALIGN=2

                  max_voltage_calibration PROC
;;;74     /*save the maximum voltage data IN MEMORY---------------------------*/
;;;75     void max_voltage_calibration()
000000  f04f0000          MOV      r0,#0
;;;76     {
;;;77     	u8 index = 0;
;;;78     	for (index = 0; index < 32; index++)
000004  bf00              NOP      
000006  e008              B        |L4.26|
                  |L4.8|
;;;79     	{
;;;80     	 	max_voltage[index] = (u16)(All_Data_Buffer[index]);
000008  4905              LDR      r1,|L4.32|
00000a  f8311010          LDRH     r1,[r1,r0,LSL #1]
00000e  4a05              LDR      r2,|L4.36|
000010  f8221010          STRH     r1,[r2,r0,LSL #1]
000014  f1000101          ADD      r1,r0,#1              ;78
000018  b2c8              UXTB     r0,r1                 ;78
                  |L4.26|
00001a  2820              CMP      r0,#0x20              ;78
00001c  dbf4              BLT      |L4.8|
;;;81     	}
;;;82     }
00001e  4770              BX       lr
;;;83     
                          ENDP

                  |L4.32|
                          DCD      All_Data_Buffer
                  |L4.36|
                          DCD      max_voltage

                          AREA ||i.min_voltage_calibration||, CODE, READONLY, ALIGN=2

                  min_voltage_calibration PROC
;;;84     /*save the maximum voltage data IN MEMORY---------------------------*/
;;;85     void min_voltage_calibration()
000000  f04f0000          MOV      r0,#0
;;;86     {
;;;87     	u8 index = 0;
;;;88     	for (index = 0; index < 32; index++)
000004  bf00              NOP      
000006  e008              B        |L5.26|
                  |L5.8|
;;;89     	{
;;;90     	 	min_voltage[index] = (u16)(All_Data_Buffer[index]);
000008  4905              LDR      r1,|L5.32|
00000a  f8311010          LDRH     r1,[r1,r0,LSL #1]
00000e  4a05              LDR      r2,|L5.36|
000010  f8221010          STRH     r1,[r2,r0,LSL #1]
000014  f1000101          ADD      r1,r0,#1              ;88
000018  b2c8              UXTB     r0,r1                 ;88
                  |L5.26|
00001a  2820              CMP      r0,#0x20              ;88
00001c  dbf4              BLT      |L5.8|
;;;91     	}
;;;92     }
00001e  4770              BX       lr
;;;93     
                          ENDP

                  |L5.32|
                          DCD      All_Data_Buffer
                  |L5.36|
                          DCD      min_voltage

                          AREA ||i.print_test||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  print_test PROC
;;;62     
;;;63     void print_test()
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65         uint16_t count = 0;
000002  f04f0400          MOV      r4,#0
;;;66     	printf("\r\n The Five Data Is : \r\n");	
000006  a008              ADR      r0,|L6.40|
000008  f7fffffe          BL       __2printf
;;;67     	while(count < 5)
00000c  e008              B        |L6.32|
                  |L6.14|
;;;68         {
;;;69             printf("\r %d \r",*(u16*)(0x8002000 + count*2));      
00000e  480d              LDR      r0,|L6.68|
000010  f8301014          LDRH     r1,[r0,r4,LSL #1]
000014  a00c              ADR      r0,|L6.72|
000016  f7fffffe          BL       __2printf
;;;70             count++;
00001a  f1040001          ADD      r0,r4,#1
00001e  b284              UXTH     r4,r0
                  |L6.32|
000020  2c05              CMP      r4,#5                 ;67
000022  dbf4              BLT      |L6.14|
;;;71         }	
;;;72     }
000024  bd10              POP      {r4,pc}
;;;73     
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
000028  0d0a2054          DCB      "\r\n The Five Data Is : \r\n",0
00002c  68652046
000030  69766520
000034  44617461
000038  20497320
00003c  3a200d0a
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0
                  |L6.68|
                          DCD      0x08002000
                  |L6.72|
000048  0d202564          DCB      "\r %d \r",0
00004c  200d00  
00004f  00                DCB      0

                          AREA ||i.read_calibration_data||, CODE, READONLY, ALIGN=2

                  read_calibration_data PROC
;;;107    
;;;108    void read_calibration_data()
000000  f04f0000          MOV      r0,#0
;;;109    {
;;;110    	u8 index = 0;
;;;111    	for(index = 0; index < CAL_DATA_LENGTH; index++)
000004  bf00              NOP      
000006  e013              B        |L7.48|
                  |L7.8|
;;;112    	{
;;;113    		if(index <  MAX_VOL_DATA_LENGTH)
000008  2820              CMP      r0,#0x20
00000a  da06              BGE      |L7.26|
;;;114    		{
;;;115    			/*fetch the maximum voltage data from the flash*/
;;;116    			stored_max_voltage[index] = *(u16*)(0x8002000 + index*2);
00000c  490a              LDR      r1,|L7.56|
00000e  f8311010          LDRH     r1,[r1,r0,LSL #1]
000012  4a0a              LDR      r2,|L7.60|
000014  f8221010          STRH     r1,[r2,r0,LSL #1]
000018  e007              B        |L7.42|
                  |L7.26|
;;;117    		}
;;;118    		else
;;;119    		{
;;;120    			/*fetch the minimum voltage data from the flash*/
;;;121    			stored_min_voltage[index - MAX_VOL_DATA_LENGTH] = *(u16*)(0x8002000 + index*2);
00001a  4907              LDR      r1,|L7.56|
00001c  f8312010          LDRH     r2,[r1,r0,LSL #1]
000020  f1a00120          SUB      r1,r0,#0x20
000024  4b06              LDR      r3,|L7.64|
000026  f8232011          STRH     r2,[r3,r1,LSL #1]
                  |L7.42|
00002a  f1000101          ADD      r1,r0,#1              ;111
00002e  b2c8              UXTB     r0,r1                 ;111
                  |L7.48|
000030  2840              CMP      r0,#0x40              ;111
000032  dbe9              BLT      |L7.8|
;;;122    		}
;;;123    	}	
;;;124    }
000034  4770              BX       lr
;;;125    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      0x08002000
                  |L7.60|
                          DCD      stored_max_voltage
                  |L7.64|
                          DCD      stored_min_voltage

                          AREA ||i.read_data_size||, CODE, READONLY, ALIGN=2

                  read_data_size PROC
;;;14     
;;;15     uint16_t read_data_size()
000000  4801              LDR      r0,|L8.8|
;;;16     {
;;;17     	return *(u8*)(0x8002000);
000002  7800              LDRB     r0,[r0,#0]
;;;18     }
000004  4770              BX       lr
;;;19     
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x08002000

                          AREA ||i.store_calibration_data||, CODE, READONLY, ALIGN=2

                  store_calibration_data PROC
;;;93     
;;;94     void store_calibration_data()
000000  b510              PUSH     {r4,lr}
;;;95     {
000002  b0a0              SUB      sp,sp,#0x80
;;;96      	u16 temp[CAL_DATA_LENGTH];
;;;97     	u8 index = 0;
000004  f04f0400          MOV      r4,#0
;;;98     	for (index = 0; index < CAL_DATA_LENGTH; index++)
000008  bf00              NOP      
00000a  e011              B        |L9.48|
                  |L9.12|
;;;99     	{
;;;100    	 	if(index < MAX_VOL_DATA_LENGTH)
00000c  2c20              CMP      r4,#0x20
00000e  da05              BGE      |L9.28|
;;;101    			temp[index] = max_voltage[index];
000010  480b              LDR      r0,|L9.64|
000012  f8300014          LDRH     r0,[r0,r4,LSL #1]
000016  f82d0014          STRH     r0,[sp,r4,LSL #1]
00001a  e006              B        |L9.42|
                  |L9.28|
;;;102    		else
;;;103    			temp[index] = min_voltage[index-MAX_VOL_DATA_LENGTH];
00001c  f1a40020          SUB      r0,r4,#0x20
000020  4908              LDR      r1,|L9.68|
000022  f8310010          LDRH     r0,[r1,r0,LSL #1]
000026  f82d0014          STRH     r0,[sp,r4,LSL #1]
                  |L9.42|
00002a  f1040001          ADD      r0,r4,#1              ;98
00002e  b2c4              UXTB     r4,r0                 ;98
                  |L9.48|
000030  2c40              CMP      r4,#0x40              ;98
000032  dbeb              BLT      |L9.12|
;;;104    	} 
;;;105    	flash_write_array(temp, CAL_DATA_LENGTH);
000034  2140              MOVS     r1,#0x40
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       flash_write_array
;;;106    }
00003c  b020              ADD      sp,sp,#0x80
00003e  bd10              POP      {r4,pc}
;;;107    
                          ENDP

                  |L9.64|
                          DCD      max_voltage
                  |L9.68|
                          DCD      min_voltage

                          AREA ||i.test_write||, CODE, READONLY, ALIGN=2

                  test_write PROC
;;;54     
;;;55     void test_write()
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57     	//u16 tick;
;;;58     	flash_write_array(test_data, 5);
000002  2105              MOVS     r1,#5
000004  4801              LDR      r0,|L10.12|
000006  f7fffffe          BL       flash_write_array
;;;59     	//for(tick = 0; tick < 50000; tick++);
;;;60     	//flash_write_array(test_data, 5);
;;;61     }
00000a  bd10              POP      {r4,pc}
;;;62     
                          ENDP

                  |L10.12|
                          DCD      test_data

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  max_voltage
                          %        64
                  min_voltage
                          %        64
                  stored_max_voltage
                          %        64
                  stored_min_voltage
                          %        64

                          AREA ||.data||, DATA, ALIGN=1

                  test_data
000000  00010002          DCW      0x0001,0x0002
000004  00030004          DCW      0x0003,0x0004
000008  0005              DCW      0x0005
