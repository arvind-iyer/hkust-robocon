; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_rcc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_rcc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\FWlib\inc -I.\user -I"C:\Users\Kenneth Au\Desktop\toKenneth\Complicated Big Motor Control\(encoder)24V Big Blue Black Motor Control June 7\RTE" -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=513 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\obj\stm32f10x_rcc.crf FWlib\SRC\stm32f10x_rcc.c]
                          THUMB

                          AREA ||i.RCC_ADCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_ADCCLKConfig PROC
;;;521      */
;;;522    void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
000000  4601              MOV      r1,r0
;;;523    {
;;;524      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;525      /* Check the parameters */
;;;526      assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
;;;527      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L1.20|
000006  6850              LDR      r0,[r2,#4]
;;;528      /* Clear ADCPRE[1:0] bits */
;;;529      tmpreg &= CFGR_ADCPRE_Reset_Mask;
000008  f4204040          BIC      r0,r0,#0xc000
;;;530      /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
;;;531      tmpreg |= RCC_PCLK2;
00000c  4308              ORRS     r0,r0,r1
;;;532      /* Store the new value */
;;;533      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;534    }
000010  4770              BX       lr
;;;535    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40021000

                          AREA ||i.RCC_AHBPeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHBPeriphClockCmd PROC
;;;708      */
;;;709    void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
000000  b129              CBZ      r1,|L2.14|
;;;710    {
;;;711      /* Check the parameters */
;;;712      assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
;;;713      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;714      if (NewState != DISABLE)
;;;715      {
;;;716        RCC->AHBENR |= RCC_AHBPeriph;
000002  4a06              LDR      r2,|L2.28|
000004  6952              LDR      r2,[r2,#0x14]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L2.28|
00000a  615a              STR      r2,[r3,#0x14]
00000c  e004              B        |L2.24|
                  |L2.14|
;;;717      }
;;;718      else
;;;719      {
;;;720        RCC->AHBENR &= ~RCC_AHBPeriph;
00000e  4a03              LDR      r2,|L2.28|
000010  6952              LDR      r2,[r2,#0x14]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L2.28|
000016  615a              STR      r2,[r3,#0x14]
                  |L2.24|
;;;721      }
;;;722    }
000018  4770              BX       lr
;;;723    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;769      */
;;;770    void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L3.14|
;;;771    {
;;;772      /* Check the parameters */
;;;773      assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;774      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;775      if (NewState != DISABLE)
;;;776      {
;;;777        RCC->APB1ENR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L3.28|
000004  69d2              LDR      r2,[r2,#0x1c]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L3.28|
00000a  61da              STR      r2,[r3,#0x1c]
00000c  e004              B        |L3.24|
                  |L3.14|
;;;778      }
;;;779      else
;;;780      {
;;;781        RCC->APB1ENR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L3.28|
000010  69d2              LDR      r2,[r2,#0x1c]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L3.28|
000016  61da              STR      r2,[r3,#0x1c]
                  |L3.24|
;;;782      }
;;;783    }
000018  4770              BX       lr
;;;784    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;828      */
;;;829    void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L4.14|
;;;830    {
;;;831      /* Check the parameters */
;;;832      assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;833      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;834      if (NewState != DISABLE)
;;;835      {
;;;836        RCC->APB1RSTR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L4.28|
000004  6912              LDR      r2,[r2,#0x10]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L4.28|
00000a  611a              STR      r2,[r3,#0x10]
00000c  e004              B        |L4.24|
                  |L4.14|
;;;837      }
;;;838      else
;;;839      {
;;;840        RCC->APB1RSTR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L4.28|
000010  6912              LDR      r2,[r2,#0x10]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L4.28|
000016  611a              STR      r2,[r3,#0x10]
                  |L4.24|
;;;841      }
;;;842    }
000018  4770              BX       lr
;;;843    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;738      */
;;;739    void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L5.14|
;;;740    {
;;;741      /* Check the parameters */
;;;742      assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;743      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;744      if (NewState != DISABLE)
;;;745      {
;;;746        RCC->APB2ENR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L5.28|
000004  6992              LDR      r2,[r2,#0x18]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L5.28|
00000a  619a              STR      r2,[r3,#0x18]
00000c  e004              B        |L5.24|
                  |L5.14|
;;;747      }
;;;748      else
;;;749      {
;;;750        RCC->APB2ENR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L5.28|
000010  6992              LDR      r2,[r2,#0x18]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L5.28|
000016  619a              STR      r2,[r3,#0x18]
                  |L5.24|
;;;751      }
;;;752    }
000018  4770              BX       lr
;;;753    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;798      */
;;;799    void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L6.14|
;;;800    {
;;;801      /* Check the parameters */
;;;802      assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;803      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;804      if (NewState != DISABLE)
;;;805      {
;;;806        RCC->APB2RSTR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L6.28|
000004  68d2              LDR      r2,[r2,#0xc]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L6.28|
00000a  60da              STR      r2,[r3,#0xc]
00000c  e004              B        |L6.24|
                  |L6.14|
;;;807      }
;;;808      else
;;;809      {
;;;810        RCC->APB2RSTR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L6.28|
000010  68d2              LDR      r2,[r2,#0xc]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L6.28|
000016  60da              STR      r2,[r3,#0xc]
                  |L6.24|
;;;811      }
;;;812    }
000018  4770              BX       lr
;;;813    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40021000

                          AREA ||i.RCC_AdjustHSICalibrationValue||, CODE, READONLY, ALIGN=2

                  RCC_AdjustHSICalibrationValue PROC
;;;271      */
;;;272    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
000000  4601              MOV      r1,r0
;;;273    {
;;;274      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;275      /* Check the parameters */
;;;276      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;277      tmpreg = RCC->CR;
000004  4a03              LDR      r2,|L7.20|
000006  6810              LDR      r0,[r2,#0]
;;;278      /* Clear HSITRIM[4:0] bits */
;;;279      tmpreg &= CR_HSITRIM_Mask;
000008  f02000f8          BIC      r0,r0,#0xf8
;;;280      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;281      tmpreg |= (uint32_t)HSICalibrationValue << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;282      /* Store the new value */
;;;283      RCC->CR = tmpreg;
000010  6010              STR      r0,[r2,#0]
;;;284    }
000012  4770              BX       lr
;;;285    
                          ENDP

                  |L7.20|
                          DCD      0x40021000

                          AREA ||i.RCC_BackupResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_BackupResetCmd PROC
;;;849      */
;;;850    void RCC_BackupResetCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L8.8|
;;;851    {
;;;852      /* Check the parameters */
;;;853      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;854      *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;855    }
000004  4770              BX       lr
;;;856    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x42420440

                          AREA ||i.RCC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RCC_ClearFlag PROC
;;;948      */
;;;949    void RCC_ClearFlag(void)
000000  4803              LDR      r0,|L9.16|
;;;950    {
;;;951      /* Set RMVF bit to clear the reset flags */
;;;952      RCC->CSR |= CSR_RMVF_Set;
000002  6a40              LDR      r0,[r0,#0x24]
000004  f0407080          ORR      r0,r0,#0x1000000
000008  4901              LDR      r1,|L9.16|
00000a  6248              STR      r0,[r1,#0x24]
;;;953    }
00000c  4770              BX       lr
;;;954    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40021000

                          AREA ||i.RCC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RCC_ClearITPendingBit PROC
;;;996      */
;;;997    void RCC_ClearITPendingBit(uint8_t RCC_IT)
000000  4901              LDR      r1,|L10.8|
;;;998    {
;;;999      /* Check the parameters */
;;;1000     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;1001     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;1002        pending bits */
;;;1003     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
000002  7288              STRB     r0,[r1,#0xa]
;;;1004   }
000004  4770              BX       lr
;;;1005   
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x40021000

                          AREA ||i.RCC_ClockSecuritySystemCmd||, CODE, READONLY, ALIGN=2

                  RCC_ClockSecuritySystemCmd PROC
;;;862      */
;;;863    void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L11.8|
;;;864    {
;;;865      /* Check the parameters */
;;;866      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;867      *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
000002  64c8              STR      r0,[r1,#0x4c]
;;;868    }
000004  4770              BX       lr
;;;869    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x42420000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;178      */
;;;179    void RCC_DeInit(void)
000000  480f              LDR      r0,|L12.64|
;;;180    {
;;;181      /* Set HSION bit */
;;;182      RCC->CR |= (uint32_t)0x00000001;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  490d              LDR      r1,|L12.64|
00000a  6008              STR      r0,[r1,#0]
;;;183      /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
;;;184      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  4608              MOV      r0,r1
00000e  6840              LDR      r0,[r0,#4]
000010  490c              LDR      r1,|L12.68|
000012  4008              ANDS     r0,r0,r1
000014  490a              LDR      r1,|L12.64|
000016  6048              STR      r0,[r1,#4]
;;;185      
;;;186      /* Reset HSEON, CSSON and PLLON bits */
;;;187      RCC->CR &= (uint32_t)0xFEF6FFFF;
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  490a              LDR      r1,|L12.72|
00001e  4008              ANDS     r0,r0,r1
000020  4907              LDR      r1,|L12.64|
000022  6008              STR      r0,[r1,#0]
;;;188      /* Reset HSEBYP bit */
;;;189      RCC->CR &= (uint32_t)0xFFFBFFFF;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f4202080          BIC      r0,r0,#0x40000
00002c  6008              STR      r0,[r1,#0]
;;;190      /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
;;;191      RCC->CFGR &= (uint32_t)0xFF80FFFF;
00002e  4608              MOV      r0,r1
000030  6840              LDR      r0,[r0,#4]
000032  f42000fe          BIC      r0,r0,#0x7f0000
000036  6048              STR      r0,[r1,#4]
;;;192      /* Disable all interrupts */
;;;193      RCC->CIR = 0x00000000;
000038  2000              MOVS     r0,#0
00003a  6088              STR      r0,[r1,#8]
;;;194    }
00003c  4770              BX       lr
;;;195    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      0x40021000
                  |L12.68|
                          DCD      0xf8ff0000
                  |L12.72|
                          DCD      0xfef6ffff

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;627      */
;;;628    void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  b530              PUSH     {r4,r5,lr}
;;;629    {
;;;630      uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
;;;631      /* Get SYSCLK source -------------------------------------------------------*/
;;;632      tmp = RCC->CFGR & CFGR_SWS_Mask;
00000a  4d2d              LDR      r5,|L13.192|
00000c  686d              LDR      r5,[r5,#4]
00000e  f005010c          AND      r1,r5,#0xc
;;;633      switch (tmp)
000012  b121              CBZ      r1,|L13.30|
000014  2904              CMP      r1,#4
000016  d005              BEQ      |L13.36|
000018  2908              CMP      r1,#8
00001a  d123              BNE      |L13.100|
00001c  e005              B        |L13.42|
                  |L13.30|
;;;634      {
;;;635        case 0x00:  /* HSI used as system clock */
;;;636          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
00001e  4d29              LDR      r5,|L13.196|
000020  6005              STR      r5,[r0,#0]
;;;637          break;
000022  e022              B        |L13.106|
                  |L13.36|
;;;638        case 0x04:  /* HSE used as system clock */
;;;639          RCC_Clocks->SYSCLK_Frequency = HSE_Value;
000024  4d27              LDR      r5,|L13.196|
000026  6005              STR      r5,[r0,#0]
;;;640          break;
000028  e01f              B        |L13.106|
                  |L13.42|
;;;641        case 0x08:  /* PLL used as system clock */
;;;642          /* Get PLL clock source and multiplication factor ----------------------*/
;;;643          pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
00002a  4d25              LDR      r5,|L13.192|
00002c  686d              LDR      r5,[r5,#4]
00002e  f4051270          AND      r2,r5,#0x3c0000
;;;644          pllmull = ( pllmull >> 18) + 2;
000032  2502              MOVS     r5,#2
000034  eb054292          ADD      r2,r5,r2,LSR #18
;;;645          pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
000038  4d21              LDR      r5,|L13.192|
00003a  686d              LDR      r5,[r5,#4]
00003c  f4053480          AND      r4,r5,#0x10000
;;;646          if (pllsource == 0x00)
000040  b91c              CBNZ     r4,|L13.74|
;;;647          {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;648            RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
000042  4d21              LDR      r5,|L13.200|
000044  4355              MULS     r5,r2,r5
000046  6005              STR      r5,[r0,#0]
000048  e00b              B        |L13.98|
                  |L13.74|
;;;649          }
;;;650          else
;;;651          {/* HSE selected as PLL clock entry */
;;;652            if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
00004a  4d1d              LDR      r5,|L13.192|
00004c  686d              LDR      r5,[r5,#4]
00004e  f4053500          AND      r5,r5,#0x20000
000052  b11d              CBZ      r5,|L13.92|
;;;653            {/* HSE oscillator clock divided by 2 */
;;;654              RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
000054  4d1c              LDR      r5,|L13.200|
000056  4355              MULS     r5,r2,r5
000058  6005              STR      r5,[r0,#0]
00005a  e002              B        |L13.98|
                  |L13.92|
;;;655            }
;;;656            else
;;;657            {
;;;658              RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
00005c  4d19              LDR      r5,|L13.196|
00005e  4355              MULS     r5,r2,r5
000060  6005              STR      r5,[r0,#0]
                  |L13.98|
;;;659            }
;;;660          }
;;;661          break;
000062  e002              B        |L13.106|
                  |L13.100|
;;;662        default:
;;;663          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
000064  4d17              LDR      r5,|L13.196|
000066  6005              STR      r5,[r0,#0]
;;;664          break;
000068  bf00              NOP      
                  |L13.106|
00006a  bf00              NOP                            ;637
;;;665      }
;;;666      /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
;;;667      /* Get HCLK prescaler */
;;;668      tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
00006c  4d14              LDR      r5,|L13.192|
00006e  686d              LDR      r5,[r5,#4]
000070  f00501f0          AND      r1,r5,#0xf0
;;;669      tmp = tmp >> 4;
000074  0909              LSRS     r1,r1,#4
;;;670      presc = APBAHBPrescTable[tmp];
000076  4d15              LDR      r5,|L13.204|
000078  5c6b              LDRB     r3,[r5,r1]
;;;671      /* HCLK clock frequency */
;;;672      RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
00007a  6805              LDR      r5,[r0,#0]
00007c  40dd              LSRS     r5,r5,r3
00007e  6045              STR      r5,[r0,#4]
;;;673      /* Get PCLK1 prescaler */
;;;674      tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
000080  4d0f              LDR      r5,|L13.192|
000082  686d              LDR      r5,[r5,#4]
000084  f40561e0          AND      r1,r5,#0x700
;;;675      tmp = tmp >> 8;
000088  0a09              LSRS     r1,r1,#8
;;;676      presc = APBAHBPrescTable[tmp];
00008a  4d10              LDR      r5,|L13.204|
00008c  5c6b              LDRB     r3,[r5,r1]
;;;677      /* PCLK1 clock frequency */
;;;678      RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
00008e  6845              LDR      r5,[r0,#4]
000090  40dd              LSRS     r5,r5,r3
000092  6085              STR      r5,[r0,#8]
;;;679      /* Get PCLK2 prescaler */
;;;680      tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
000094  4d0a              LDR      r5,|L13.192|
000096  686d              LDR      r5,[r5,#4]
000098  f4055160          AND      r1,r5,#0x3800
;;;681      tmp = tmp >> 11;
00009c  0ac9              LSRS     r1,r1,#11
;;;682      presc = APBAHBPrescTable[tmp];
00009e  4d0b              LDR      r5,|L13.204|
0000a0  5c6b              LDRB     r3,[r5,r1]
;;;683      /* PCLK2 clock frequency */
;;;684      RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
0000a2  6845              LDR      r5,[r0,#4]
0000a4  40dd              LSRS     r5,r5,r3
0000a6  60c5              STR      r5,[r0,#0xc]
;;;685      /* Get ADCCLK prescaler */
;;;686      tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
0000a8  4d05              LDR      r5,|L13.192|
0000aa  686d              LDR      r5,[r5,#4]
0000ac  f4054140          AND      r1,r5,#0xc000
;;;687      tmp = tmp >> 14;
0000b0  0b89              LSRS     r1,r1,#14
;;;688      presc = ADCPrescTable[tmp];
0000b2  4d07              LDR      r5,|L13.208|
0000b4  5c6b              LDRB     r3,[r5,r1]
;;;689      /* ADCCLK clock frequency */
;;;690      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
0000b6  68c5              LDR      r5,[r0,#0xc]
0000b8  fbb5f5f3          UDIV     r5,r5,r3
0000bc  6105              STR      r5,[r0,#0x10]
;;;691    }
0000be  bd30              POP      {r4,r5,pc}
;;;692    
                          ENDP

                  |L13.192|
                          DCD      0x40021000
                  |L13.196|
                          DCD      0x007a1200
                  |L13.200|
                          DCD      0x003d0900
                  |L13.204|
                          DCD      APBAHBPrescTable
                  |L13.208|
                          DCD      ADCPrescTable

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;905      */
;;;906    FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;907    {
000002  4601              MOV      r1,r0
;;;908      uint32_t tmp = 0;
000004  2200              MOVS     r2,#0
;;;909      uint32_t statusreg = 0;
000006  2300              MOVS     r3,#0
;;;910      FlagStatus bitstatus = RESET;
000008  2000              MOVS     r0,#0
;;;911      /* Check the parameters */
;;;912      assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;913      /* Get the RCC register index */
;;;914      tmp = RCC_FLAG >> 5;
00000a  114a              ASRS     r2,r1,#5
;;;915      if (tmp == 1)               /* The flag to check is in CR register */
00000c  2a01              CMP      r2,#1
00000e  d102              BNE      |L14.22|
;;;916      {
;;;917        statusreg = RCC->CR;
000010  4c09              LDR      r4,|L14.56|
000012  6823              LDR      r3,[r4,#0]
000014  e006              B        |L14.36|
                  |L14.22|
;;;918      }
;;;919      else if (tmp == 2)          /* The flag to check is in BDCR register */
000016  2a02              CMP      r2,#2
000018  d102              BNE      |L14.32|
;;;920      {
;;;921        statusreg = RCC->BDCR;
00001a  4c07              LDR      r4,|L14.56|
00001c  6a23              LDR      r3,[r4,#0x20]
00001e  e001              B        |L14.36|
                  |L14.32|
;;;922      }
;;;923      else                       /* The flag to check is in CSR register */
;;;924      {
;;;925        statusreg = RCC->CSR;
000020  4c05              LDR      r4,|L14.56|
000022  6a63              LDR      r3,[r4,#0x24]
                  |L14.36|
;;;926      }
;;;927      /* Get the flag position */
;;;928      tmp = RCC_FLAG & FLAG_Mask;
000024  f001021f          AND      r2,r1,#0x1f
;;;929      if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
000028  2401              MOVS     r4,#1
00002a  4094              LSLS     r4,r4,r2
00002c  401c              ANDS     r4,r4,r3
00002e  b10c              CBZ      r4,|L14.52|
;;;930      {
;;;931        bitstatus = SET;
000030  2001              MOVS     r0,#1
000032  e000              B        |L14.54|
                  |L14.52|
;;;932      }
;;;933      else
;;;934      {
;;;935        bitstatus = RESET;
000034  2000              MOVS     r0,#0
                  |L14.54|
;;;936      }
;;;937      /* Return the flag status */
;;;938      return bitstatus;
;;;939    }
000036  bd10              POP      {r4,pc}
;;;940    
                          ENDP

                  |L14.56|
                          DCD      0x40021000

                          AREA ||i.RCC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetITStatus PROC
;;;966      */
;;;967    ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000000  4601              MOV      r1,r0
;;;968    {
;;;969      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;970      /* Check the parameters */
;;;971      assert_param(IS_RCC_GET_IT(RCC_IT));
;;;972      /* Check the status of the specified RCC interrupt */
;;;973      if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L15.20|
000006  6892              LDR      r2,[r2,#8]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L15.16|
;;;974      {
;;;975        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L15.18|
                  |L15.16|
;;;976      }
;;;977      else
;;;978      {
;;;979        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L15.18|
;;;980      }
;;;981      /* Return the RCC_IT status */
;;;982      return  bitstatus;
;;;983    }
000012  4770              BX       lr
;;;984    
                          ENDP

                  |L15.20|
                          DCD      0x40021000

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;376      */
;;;377    uint8_t RCC_GetSYSCLKSource(void)
000000  4802              LDR      r0,|L16.12|
;;;378    {
;;;379      return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
000002  6840              LDR      r0,[r0,#4]
000004  f000000c          AND      r0,r0,#0xc
;;;380    }
000008  4770              BX       lr
;;;381    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40021000

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;397      */
;;;398    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000000  4601              MOV      r1,r0
;;;399    {
;;;400      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;401      /* Check the parameters */
;;;402      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;403      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L17.20|
000006  6850              LDR      r0,[r2,#4]
;;;404      /* Clear HPRE[3:0] bits */
;;;405      tmpreg &= CFGR_HPRE_Reset_Mask;
000008  f02000f0          BIC      r0,r0,#0xf0
;;;406      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;407      tmpreg |= RCC_SYSCLK;
00000c  4308              ORRS     r0,r0,r1
;;;408      /* Store the new value */
;;;409      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;410    }
000010  4770              BX       lr
;;;411    
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      0x40021000

                          AREA ||i.RCC_HSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_HSEConfig PROC
;;;207      */
;;;208    void RCC_HSEConfig(uint32_t RCC_HSE)
000000  4911              LDR      r1,|L18.72|
;;;209    {
;;;210      /* Check the parameters */
;;;211      assert_param(IS_RCC_HSE(RCC_HSE));
;;;212      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;213      /* Reset HSEON bit */
;;;214      RCC->CR &= CR_HSEON_Reset;
000002  6809              LDR      r1,[r1,#0]
000004  f4213180          BIC      r1,r1,#0x10000
000008  4a0f              LDR      r2,|L18.72|
00000a  6011              STR      r1,[r2,#0]
;;;215      /* Reset HSEBYP bit */
;;;216      RCC->CR &= CR_HSEBYP_Reset;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  f4212180          BIC      r1,r1,#0x40000
000014  6011              STR      r1,[r2,#0]
;;;217      /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
;;;218      switch(RCC_HSE)
000016  f5b03f80          CMP      r0,#0x10000
00001a  d003              BEQ      |L18.36|
00001c  f5b02f80          CMP      r0,#0x40000
000020  d10e              BNE      |L18.64|
000022  e006              B        |L18.50|
                  |L18.36|
;;;219      {
;;;220        case RCC_HSE_ON:
;;;221          /* Set HSEON bit */
;;;222          RCC->CR |= CR_HSEON_Set;
000024  4908              LDR      r1,|L18.72|
000026  6809              LDR      r1,[r1,#0]
000028  f4413180          ORR      r1,r1,#0x10000
00002c  4a06              LDR      r2,|L18.72|
00002e  6011              STR      r1,[r2,#0]
;;;223          break;
000030  e007              B        |L18.66|
                  |L18.50|
;;;224          
;;;225        case RCC_HSE_Bypass:
;;;226          /* Set HSEBYP and HSEON bits */
;;;227          RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
000032  4905              LDR      r1,|L18.72|
000034  6809              LDR      r1,[r1,#0]
000036  f44121a0          ORR      r1,r1,#0x50000
00003a  4a03              LDR      r2,|L18.72|
00003c  6011              STR      r1,[r2,#0]
;;;228          break;
00003e  e000              B        |L18.66|
                  |L18.64|
;;;229          
;;;230        default:
;;;231          break;
000040  bf00              NOP      
                  |L18.66|
000042  bf00              NOP                            ;223
;;;232      }
;;;233    }
000044  4770              BX       lr
;;;234    
                          ENDP

000046  0000              DCW      0x0000
                  |L18.72|
                          DCD      0x40021000

                          AREA ||i.RCC_HSICmd||, CODE, READONLY, ALIGN=2

                  RCC_HSICmd PROC
;;;293      */
;;;294    void RCC_HSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L19.8|
;;;295    {
;;;296      /* Check the parameters */
;;;297      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;298      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;299    }
000004  4770              BX       lr
;;;300    
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x42420000

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;476      */
;;;477    void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L20.14|
;;;478    {
;;;479      /* Check the parameters */
;;;480      assert_param(IS_RCC_IT(RCC_IT));
;;;481      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;482      if (NewState != DISABLE)
;;;483      {
;;;484        /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
;;;485        *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
000002  4a06              LDR      r2,|L20.28|
000004  7a52              LDRB     r2,[r2,#9]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L20.28|
00000a  725a              STRB     r2,[r3,#9]
00000c  e004              B        |L20.24|
                  |L20.14|
;;;486      }
;;;487      else
;;;488      {
;;;489        /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
;;;490        *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
00000e  4a03              LDR      r2,|L20.28|
000010  7a52              LDRB     r2,[r2,#9]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L20.28|
000016  725a              STRB     r2,[r3,#9]
                  |L20.24|
;;;491      }
;;;492    }
000018  4770              BX       lr
;;;493    
                          ENDP

00001a  0000              DCW      0x0000
                  |L20.28|
                          DCD      0x40021000

                          AREA ||i.RCC_LSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEConfig PROC
;;;545      */
;;;546    void RCC_LSEConfig(uint8_t RCC_LSE)
000000  2100              MOVS     r1,#0
;;;547    {
;;;548      /* Check the parameters */
;;;549      assert_param(IS_RCC_LSE(RCC_LSE));
;;;550      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;551      /* Reset LSEON bit */
;;;552      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000002  4a0b              LDR      r2,|L21.48|
000004  7011              STRB     r1,[r2,#0]
;;;553      /* Reset LSEBYP bit */
;;;554      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000006  4a0a              LDR      r2,|L21.48|
000008  3a20              SUBS     r2,r2,#0x20
00000a  f8821020          STRB     r1,[r2,#0x20]
;;;555      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;556      switch(RCC_LSE)
00000e  2801              CMP      r0,#1
000010  d002              BEQ      |L21.24|
000012  2804              CMP      r0,#4
000014  d108              BNE      |L21.40|
000016  e003              B        |L21.32|
                  |L21.24|
;;;557      {
;;;558        case RCC_LSE_ON:
;;;559          /* Set LSEON bit */
;;;560          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
000018  2101              MOVS     r1,#1
00001a  4a05              LDR      r2,|L21.48|
00001c  7011              STRB     r1,[r2,#0]
;;;561          break;
00001e  e004              B        |L21.42|
                  |L21.32|
;;;562          
;;;563        case RCC_LSE_Bypass:
;;;564          /* Set LSEBYP and LSEON bits */
;;;565          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
000020  2105              MOVS     r1,#5
000022  4a03              LDR      r2,|L21.48|
000024  7011              STRB     r1,[r2,#0]
;;;566          break;            
000026  e000              B        |L21.42|
                  |L21.40|
;;;567          
;;;568        default:
;;;569          break;      
000028  bf00              NOP      
                  |L21.42|
00002a  bf00              NOP                            ;561
;;;570      }
;;;571    }
00002c  4770              BX       lr
;;;572    
                          ENDP

00002e  0000              DCW      0x0000
                  |L21.48|
                          DCD      0x40021020

                          AREA ||i.RCC_LSICmd||, CODE, READONLY, ALIGN=2

                  RCC_LSICmd PROC
;;;579      */
;;;580    void RCC_LSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L22.8|
;;;581    {
;;;582      /* Check the parameters */
;;;583      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;584      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;585    }
000004  4770              BX       lr
;;;586    
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      0x42420480

                          AREA ||i.RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  RCC_MCOConfig PROC
;;;880      */
;;;881    void RCC_MCOConfig(uint8_t RCC_MCO)
000000  4901              LDR      r1,|L23.8|
;;;882    {
;;;883      /* Check the parameters */
;;;884      assert_param(IS_RCC_MCO(RCC_MCO));
;;;885      /* Perform Byte access to MCO[2:0] bits to select the MCO source */
;;;886      *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
000002  71c8              STRB     r0,[r1,#7]
;;;887    }
000004  4770              BX       lr
;;;888    
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x40021000

                          AREA ||i.RCC_PCLK1Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK1Config PROC
;;;423      */
;;;424    void RCC_PCLK1Config(uint32_t RCC_HCLK)
000000  4601              MOV      r1,r0
;;;425    {
;;;426      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;427      /* Check the parameters */
;;;428      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;429      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L24.20|
000006  6850              LDR      r0,[r2,#4]
;;;430      /* Clear PPRE1[2:0] bits */
;;;431      tmpreg &= CFGR_PPRE1_Reset_Mask;
000008  f42060e0          BIC      r0,r0,#0x700
;;;432      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;433      tmpreg |= RCC_HCLK;
00000c  4308              ORRS     r0,r0,r1
;;;434      /* Store the new value */
;;;435      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;436    }
000010  4770              BX       lr
;;;437    
                          ENDP

000012  0000              DCW      0x0000
                  |L24.20|
                          DCD      0x40021000

                          AREA ||i.RCC_PCLK2Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK2Config PROC
;;;449      */
;;;450    void RCC_PCLK2Config(uint32_t RCC_HCLK)
000000  4601              MOV      r1,r0
;;;451    {
;;;452      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;453      /* Check the parameters */
;;;454      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;455      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L25.20|
000006  6850              LDR      r0,[r2,#4]
;;;456      /* Clear PPRE2[2:0] bits */
;;;457      tmpreg &= CFGR_PPRE2_Reset_Mask;
000008  f4205060          BIC      r0,r0,#0x3800
;;;458      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;459      tmpreg |= RCC_HCLK << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;460      /* Store the new value */
;;;461      RCC->CFGR = tmpreg;
000010  6050              STR      r0,[r2,#4]
;;;462    }
000012  4770              BX       lr
;;;463    
                          ENDP

                  |L25.20|
                          DCD      0x40021000

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;337      */
;;;338    void RCC_PLLCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L26.8|
;;;339    {
;;;340      /* Check the parameters */
;;;341      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;342      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000002  6608              STR      r0,[r1,#0x60]
;;;343    }
000004  4770              BX       lr
;;;344    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x42420000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;315      */
;;;316    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
000000  4602              MOV      r2,r0
;;;317    {
;;;318      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;319      /* Check the parameters */
;;;320      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;321      assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
;;;322      tmpreg = RCC->CFGR;
000004  4b04              LDR      r3,|L27.24|
000006  6858              LDR      r0,[r3,#4]
;;;323      /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
;;;324      tmpreg &= CFGR_PLL_Mask;
000008  f420107c          BIC      r0,r0,#0x3f0000
;;;325      /* Set the PLL configuration bits */
;;;326      tmpreg |= RCC_PLLSource | RCC_PLLMul;
00000c  ea420301          ORR      r3,r2,r1
000010  4318              ORRS     r0,r0,r3
;;;327      /* Store the new value */
;;;328      RCC->CFGR = tmpreg;
000012  4b01              LDR      r3,|L27.24|
000014  6058              STR      r0,[r3,#4]
;;;329    }
000016  4770              BX       lr
;;;330    
                          ENDP

                  |L27.24|
                          DCD      0x40021000

                          AREA ||i.RCC_RTCCLKCmd||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKCmd PROC
;;;614      */
;;;615    void RCC_RTCCLKCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;616    {
;;;617      /* Check the parameters */
;;;618      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;619      *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;620    }
000004  4770              BX       lr
;;;621    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x4242043c

                          AREA ||i.RCC_RTCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKConfig PROC
;;;598      */
;;;599    void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
000000  4902              LDR      r1,|L29.12|
;;;600    {
;;;601      /* Check the parameters */
;;;602      assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;603      /* Select the RTC clock source */
;;;604      RCC->BDCR |= RCC_RTCCLKSource;
000002  6a09              LDR      r1,[r1,#0x20]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L29.12|
000008  6211              STR      r1,[r2,#0x20]
;;;605    }
00000a  4770              BX       lr
;;;606    
                          ENDP

                  |L29.12|
                          DCD      0x40021000

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;353      */
;;;354    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000000  4601              MOV      r1,r0
;;;355    {
;;;356      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;357      /* Check the parameters */
;;;358      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;359      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L30.20|
000006  6850              LDR      r0,[r2,#4]
;;;360      /* Clear SW[1:0] bits */
;;;361      tmpreg &= CFGR_SW_Mask;
000008  f0200003          BIC      r0,r0,#3
;;;362      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;363      tmpreg |= RCC_SYSCLKSource;
00000c  4308              ORRS     r0,r0,r1
;;;364      /* Store the new value */
;;;365      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;366    }
000010  4770              BX       lr
;;;367    
                          ENDP

000012  0000              DCW      0x0000
                  |L30.20|
                          DCD      0x40021000

                          AREA ||i.RCC_USBCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_USBCLKConfig PROC
;;;503      */
;;;504    void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
000000  4901              LDR      r1,|L31.8|
;;;505    {
;;;506      /* Check the parameters */
;;;507      assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
;;;508      *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
000002  6008              STR      r0,[r1,#0]
;;;509    }
000004  4770              BX       lr
;;;510    
                          ENDP

000006  0000              DCW      0x0000
                  |L31.8|
                          DCD      0x424200d8

                          AREA ||i.RCC_WaitForHSEStartUp||, CODE, READONLY, ALIGN=1

                  RCC_WaitForHSEStartUp PROC
;;;241      */
;;;242    ErrorStatus RCC_WaitForHSEStartUp(void)
000000  b538              PUSH     {r3-r5,lr}
;;;243    {
;;;244      __IO uint32_t StartUpCounter = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;245      ErrorStatus status = ERROR;
000006  2400              MOVS     r4,#0
;;;246      FlagStatus HSEStatus = RESET;
000008  2500              MOVS     r5,#0
;;;247      
;;;248      /* Wait till HSE is ready and if Time out is reached exit */
;;;249      do
00000a  bf00              NOP      
                  |L32.12|
;;;250      {
;;;251        HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
00000c  2031              MOVS     r0,#0x31
00000e  f7fffffe          BL       RCC_GetFlagStatus
000012  4605              MOV      r5,r0
;;;252        StartUpCounter++;  
000014  9800              LDR      r0,[sp,#0]
000016  1c40              ADDS     r0,r0,#1
000018  9000              STR      r0,[sp,#0]
;;;253      } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
00001a  b91d              CBNZ     r5,|L32.36|
00001c  9800              LDR      r0,[sp,#0]
00001e  f5b06fa0          CMP      r0,#0x500
000022  d1f3              BNE      |L32.12|
                  |L32.36|
;;;254      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
000024  2031              MOVS     r0,#0x31
000026  f7fffffe          BL       RCC_GetFlagStatus
00002a  b108              CBZ      r0,|L32.48|
;;;255      {
;;;256        status = SUCCESS;
00002c  2401              MOVS     r4,#1
00002e  e000              B        |L32.50|
                  |L32.48|
;;;257      }
;;;258      else
;;;259      {
;;;260        status = ERROR;
000030  2400              MOVS     r4,#0
                  |L32.50|
;;;261      }  
;;;262      return (status);
000032  4620              MOV      r0,r4
;;;263    }
000034  bd38              POP      {r3-r5,pc}
;;;264    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09
                  ADCPrescTable
000010  02040608          DCB      0x02,0x04,0x06,0x08
